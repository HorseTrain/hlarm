//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from asl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class aslLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, IDENTIFIER=68, STRING=69, DECIMAL_NUMBER=70, HEX_NUMBER=71, 
		BINARY_NUMBER=72, BITS=73, WHITE_SPACE=74, LINE_COMMENT=75, BLOB_COMMENT=76;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
		"T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
		"T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
		"T__65", "T__66", "IDENTIFIER", "STRING", "DECIMAL_NUMBER", "HEX_NUMBER", 
		"BINARY_NUMBER", "BITS", "WHITE_SPACE", "LINE_COMMENT", "BLOB_COMMENT"
	};


	public aslLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public aslLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'constant'", "'='", "','", "'&'", "';'", "'assert'", "'IMPLEMENTATION_DEFINED'", 
		"'UNDEFINED'", "'enumeration'", "'{'", "'}'", "'array'", "'of'", "'type'", 
		"'is'", "'('", "')'", "'for'", "'to'", "'downto'", "'case'", "'when'", 
		"'if'", "'then'", "'else'", "'elsif'", "'return'", "'while'", "'do'", 
		"'instruction'", "'NOT'", "'['", "']'", "'UNKNOWN'", "'<'", "'>'", "'+'", 
		"'-'", "':'", "'.'", "'..'", "'IN'", "'!'", "'^'", "'*'", "'/'", "'DIV'", 
		"'MOD'", "'<<'", "'>>'", "'<='", "'>='", "'!='", "'=='", "'AND'", "'EOR'", 
		"'OR'", "'&&'", "'||'", "'boolean'", "'integer'", "'bit'", "'real'", "'void'", 
		"'bits'", "'TRUE'", "'FALSE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "IDENTIFIER", "STRING", 
		"DECIMAL_NUMBER", "HEX_NUMBER", "BINARY_NUMBER", "BITS", "WHITE_SPACE", 
		"LINE_COMMENT", "BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "asl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static aslLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,76,537,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
		21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
		24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,
		32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,
		36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,
		42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,
		47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,
		52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,
		56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,
		61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,
		64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,
		67,5,67,452,8,67,10,67,12,67,455,9,67,1,68,1,68,5,68,459,8,68,10,68,12,
		68,462,9,68,1,68,1,68,1,69,4,69,467,8,69,11,69,12,69,468,1,69,1,69,4,69,
		473,8,69,11,69,12,69,474,3,69,477,8,69,1,70,1,70,1,70,1,70,3,70,483,8,
		70,1,70,4,70,486,8,70,11,70,12,70,487,1,71,1,71,1,71,1,71,3,71,494,8,71,
		1,71,4,71,497,8,71,11,71,12,71,498,1,72,1,72,4,72,503,8,72,11,72,12,72,
		504,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,5,74,517,8,74,10,
		74,12,74,520,9,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,528,8,75,10,75,12,
		75,531,9,75,1,75,1,75,1,75,1,75,1,75,1,529,0,76,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
		37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
		61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
		85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
		54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
		64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,
		74,149,75,151,76,1,0,9,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
		122,2,0,34,34,92,92,1,0,48,57,4,0,48,57,65,70,95,95,97,102,1,0,48,49,3,
		0,32,32,48,49,120,120,3,0,9,10,13,13,32,32,2,0,10,10,13,13,548,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
		1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,
		1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,
		1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,
		1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,
		1,0,0,0,1,153,1,0,0,0,3,162,1,0,0,0,5,164,1,0,0,0,7,166,1,0,0,0,9,168,
		1,0,0,0,11,170,1,0,0,0,13,177,1,0,0,0,15,200,1,0,0,0,17,210,1,0,0,0,19,
		222,1,0,0,0,21,224,1,0,0,0,23,226,1,0,0,0,25,232,1,0,0,0,27,235,1,0,0,
		0,29,240,1,0,0,0,31,243,1,0,0,0,33,245,1,0,0,0,35,247,1,0,0,0,37,251,1,
		0,0,0,39,254,1,0,0,0,41,261,1,0,0,0,43,266,1,0,0,0,45,271,1,0,0,0,47,274,
		1,0,0,0,49,279,1,0,0,0,51,284,1,0,0,0,53,290,1,0,0,0,55,297,1,0,0,0,57,
		303,1,0,0,0,59,306,1,0,0,0,61,318,1,0,0,0,63,322,1,0,0,0,65,324,1,0,0,
		0,67,326,1,0,0,0,69,334,1,0,0,0,71,336,1,0,0,0,73,338,1,0,0,0,75,340,1,
		0,0,0,77,342,1,0,0,0,79,344,1,0,0,0,81,346,1,0,0,0,83,349,1,0,0,0,85,352,
		1,0,0,0,87,354,1,0,0,0,89,356,1,0,0,0,91,358,1,0,0,0,93,360,1,0,0,0,95,
		364,1,0,0,0,97,368,1,0,0,0,99,371,1,0,0,0,101,374,1,0,0,0,103,377,1,0,
		0,0,105,380,1,0,0,0,107,383,1,0,0,0,109,386,1,0,0,0,111,390,1,0,0,0,113,
		394,1,0,0,0,115,397,1,0,0,0,117,400,1,0,0,0,119,403,1,0,0,0,121,411,1,
		0,0,0,123,419,1,0,0,0,125,423,1,0,0,0,127,428,1,0,0,0,129,433,1,0,0,0,
		131,438,1,0,0,0,133,443,1,0,0,0,135,449,1,0,0,0,137,456,1,0,0,0,139,466,
		1,0,0,0,141,482,1,0,0,0,143,493,1,0,0,0,145,500,1,0,0,0,147,508,1,0,0,
		0,149,512,1,0,0,0,151,523,1,0,0,0,153,154,5,99,0,0,154,155,5,111,0,0,155,
		156,5,110,0,0,156,157,5,115,0,0,157,158,5,116,0,0,158,159,5,97,0,0,159,
		160,5,110,0,0,160,161,5,116,0,0,161,2,1,0,0,0,162,163,5,61,0,0,163,4,1,
		0,0,0,164,165,5,44,0,0,165,6,1,0,0,0,166,167,5,38,0,0,167,8,1,0,0,0,168,
		169,5,59,0,0,169,10,1,0,0,0,170,171,5,97,0,0,171,172,5,115,0,0,172,173,
		5,115,0,0,173,174,5,101,0,0,174,175,5,114,0,0,175,176,5,116,0,0,176,12,
		1,0,0,0,177,178,5,73,0,0,178,179,5,77,0,0,179,180,5,80,0,0,180,181,5,76,
		0,0,181,182,5,69,0,0,182,183,5,77,0,0,183,184,5,69,0,0,184,185,5,78,0,
		0,185,186,5,84,0,0,186,187,5,65,0,0,187,188,5,84,0,0,188,189,5,73,0,0,
		189,190,5,79,0,0,190,191,5,78,0,0,191,192,5,95,0,0,192,193,5,68,0,0,193,
		194,5,69,0,0,194,195,5,70,0,0,195,196,5,73,0,0,196,197,5,78,0,0,197,198,
		5,69,0,0,198,199,5,68,0,0,199,14,1,0,0,0,200,201,5,85,0,0,201,202,5,78,
		0,0,202,203,5,68,0,0,203,204,5,69,0,0,204,205,5,70,0,0,205,206,5,73,0,
		0,206,207,5,78,0,0,207,208,5,69,0,0,208,209,5,68,0,0,209,16,1,0,0,0,210,
		211,5,101,0,0,211,212,5,110,0,0,212,213,5,117,0,0,213,214,5,109,0,0,214,
		215,5,101,0,0,215,216,5,114,0,0,216,217,5,97,0,0,217,218,5,116,0,0,218,
		219,5,105,0,0,219,220,5,111,0,0,220,221,5,110,0,0,221,18,1,0,0,0,222,223,
		5,123,0,0,223,20,1,0,0,0,224,225,5,125,0,0,225,22,1,0,0,0,226,227,5,97,
		0,0,227,228,5,114,0,0,228,229,5,114,0,0,229,230,5,97,0,0,230,231,5,121,
		0,0,231,24,1,0,0,0,232,233,5,111,0,0,233,234,5,102,0,0,234,26,1,0,0,0,
		235,236,5,116,0,0,236,237,5,121,0,0,237,238,5,112,0,0,238,239,5,101,0,
		0,239,28,1,0,0,0,240,241,5,105,0,0,241,242,5,115,0,0,242,30,1,0,0,0,243,
		244,5,40,0,0,244,32,1,0,0,0,245,246,5,41,0,0,246,34,1,0,0,0,247,248,5,
		102,0,0,248,249,5,111,0,0,249,250,5,114,0,0,250,36,1,0,0,0,251,252,5,116,
		0,0,252,253,5,111,0,0,253,38,1,0,0,0,254,255,5,100,0,0,255,256,5,111,0,
		0,256,257,5,119,0,0,257,258,5,110,0,0,258,259,5,116,0,0,259,260,5,111,
		0,0,260,40,1,0,0,0,261,262,5,99,0,0,262,263,5,97,0,0,263,264,5,115,0,0,
		264,265,5,101,0,0,265,42,1,0,0,0,266,267,5,119,0,0,267,268,5,104,0,0,268,
		269,5,101,0,0,269,270,5,110,0,0,270,44,1,0,0,0,271,272,5,105,0,0,272,273,
		5,102,0,0,273,46,1,0,0,0,274,275,5,116,0,0,275,276,5,104,0,0,276,277,5,
		101,0,0,277,278,5,110,0,0,278,48,1,0,0,0,279,280,5,101,0,0,280,281,5,108,
		0,0,281,282,5,115,0,0,282,283,5,101,0,0,283,50,1,0,0,0,284,285,5,101,0,
		0,285,286,5,108,0,0,286,287,5,115,0,0,287,288,5,105,0,0,288,289,5,102,
		0,0,289,52,1,0,0,0,290,291,5,114,0,0,291,292,5,101,0,0,292,293,5,116,0,
		0,293,294,5,117,0,0,294,295,5,114,0,0,295,296,5,110,0,0,296,54,1,0,0,0,
		297,298,5,119,0,0,298,299,5,104,0,0,299,300,5,105,0,0,300,301,5,108,0,
		0,301,302,5,101,0,0,302,56,1,0,0,0,303,304,5,100,0,0,304,305,5,111,0,0,
		305,58,1,0,0,0,306,307,5,105,0,0,307,308,5,110,0,0,308,309,5,115,0,0,309,
		310,5,116,0,0,310,311,5,114,0,0,311,312,5,117,0,0,312,313,5,99,0,0,313,
		314,5,116,0,0,314,315,5,105,0,0,315,316,5,111,0,0,316,317,5,110,0,0,317,
		60,1,0,0,0,318,319,5,78,0,0,319,320,5,79,0,0,320,321,5,84,0,0,321,62,1,
		0,0,0,322,323,5,91,0,0,323,64,1,0,0,0,324,325,5,93,0,0,325,66,1,0,0,0,
		326,327,5,85,0,0,327,328,5,78,0,0,328,329,5,75,0,0,329,330,5,78,0,0,330,
		331,5,79,0,0,331,332,5,87,0,0,332,333,5,78,0,0,333,68,1,0,0,0,334,335,
		5,60,0,0,335,70,1,0,0,0,336,337,5,62,0,0,337,72,1,0,0,0,338,339,5,43,0,
		0,339,74,1,0,0,0,340,341,5,45,0,0,341,76,1,0,0,0,342,343,5,58,0,0,343,
		78,1,0,0,0,344,345,5,46,0,0,345,80,1,0,0,0,346,347,5,46,0,0,347,348,5,
		46,0,0,348,82,1,0,0,0,349,350,5,73,0,0,350,351,5,78,0,0,351,84,1,0,0,0,
		352,353,5,33,0,0,353,86,1,0,0,0,354,355,5,94,0,0,355,88,1,0,0,0,356,357,
		5,42,0,0,357,90,1,0,0,0,358,359,5,47,0,0,359,92,1,0,0,0,360,361,5,68,0,
		0,361,362,5,73,0,0,362,363,5,86,0,0,363,94,1,0,0,0,364,365,5,77,0,0,365,
		366,5,79,0,0,366,367,5,68,0,0,367,96,1,0,0,0,368,369,5,60,0,0,369,370,
		5,60,0,0,370,98,1,0,0,0,371,372,5,62,0,0,372,373,5,62,0,0,373,100,1,0,
		0,0,374,375,5,60,0,0,375,376,5,61,0,0,376,102,1,0,0,0,377,378,5,62,0,0,
		378,379,5,61,0,0,379,104,1,0,0,0,380,381,5,33,0,0,381,382,5,61,0,0,382,
		106,1,0,0,0,383,384,5,61,0,0,384,385,5,61,0,0,385,108,1,0,0,0,386,387,
		5,65,0,0,387,388,5,78,0,0,388,389,5,68,0,0,389,110,1,0,0,0,390,391,5,69,
		0,0,391,392,5,79,0,0,392,393,5,82,0,0,393,112,1,0,0,0,394,395,5,79,0,0,
		395,396,5,82,0,0,396,114,1,0,0,0,397,398,5,38,0,0,398,399,5,38,0,0,399,
		116,1,0,0,0,400,401,5,124,0,0,401,402,5,124,0,0,402,118,1,0,0,0,403,404,
		5,98,0,0,404,405,5,111,0,0,405,406,5,111,0,0,406,407,5,108,0,0,407,408,
		5,101,0,0,408,409,5,97,0,0,409,410,5,110,0,0,410,120,1,0,0,0,411,412,5,
		105,0,0,412,413,5,110,0,0,413,414,5,116,0,0,414,415,5,101,0,0,415,416,
		5,103,0,0,416,417,5,101,0,0,417,418,5,114,0,0,418,122,1,0,0,0,419,420,
		5,98,0,0,420,421,5,105,0,0,421,422,5,116,0,0,422,124,1,0,0,0,423,424,5,
		114,0,0,424,425,5,101,0,0,425,426,5,97,0,0,426,427,5,108,0,0,427,126,1,
		0,0,0,428,429,5,118,0,0,429,430,5,111,0,0,430,431,5,105,0,0,431,432,5,
		100,0,0,432,128,1,0,0,0,433,434,5,98,0,0,434,435,5,105,0,0,435,436,5,116,
		0,0,436,437,5,115,0,0,437,130,1,0,0,0,438,439,5,84,0,0,439,440,5,82,0,
		0,440,441,5,85,0,0,441,442,5,69,0,0,442,132,1,0,0,0,443,444,5,70,0,0,444,
		445,5,65,0,0,445,446,5,76,0,0,446,447,5,83,0,0,447,448,5,69,0,0,448,134,
		1,0,0,0,449,453,7,0,0,0,450,452,7,1,0,0,451,450,1,0,0,0,452,455,1,0,0,
		0,453,451,1,0,0,0,453,454,1,0,0,0,454,136,1,0,0,0,455,453,1,0,0,0,456,
		460,5,34,0,0,457,459,8,2,0,0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,
		0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,464,5,34,0,0,
		464,138,1,0,0,0,465,467,7,3,0,0,466,465,1,0,0,0,467,468,1,0,0,0,468,466,
		1,0,0,0,468,469,1,0,0,0,469,476,1,0,0,0,470,472,5,46,0,0,471,473,7,3,0,
		0,472,471,1,0,0,0,473,474,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,
		477,1,0,0,0,476,470,1,0,0,0,476,477,1,0,0,0,477,140,1,0,0,0,478,479,5,
		48,0,0,479,483,5,120,0,0,480,481,5,48,0,0,481,483,5,88,0,0,482,478,1,0,
		0,0,482,480,1,0,0,0,483,485,1,0,0,0,484,486,7,4,0,0,485,484,1,0,0,0,486,
		487,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,142,1,0,0,0,489,490,5,
		48,0,0,490,494,5,98,0,0,491,492,5,48,0,0,492,494,5,66,0,0,493,489,1,0,
		0,0,493,491,1,0,0,0,494,496,1,0,0,0,495,497,7,5,0,0,496,495,1,0,0,0,497,
		498,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,144,1,0,0,0,500,502,5,
		39,0,0,501,503,7,6,0,0,502,501,1,0,0,0,503,504,1,0,0,0,504,502,1,0,0,0,
		504,505,1,0,0,0,505,506,1,0,0,0,506,507,5,39,0,0,507,146,1,0,0,0,508,509,
		7,7,0,0,509,510,1,0,0,0,510,511,6,73,0,0,511,148,1,0,0,0,512,513,5,47,
		0,0,513,514,5,47,0,0,514,518,1,0,0,0,515,517,8,8,0,0,516,515,1,0,0,0,517,
		520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,0,520,518,1,
		0,0,0,521,522,6,74,0,0,522,150,1,0,0,0,523,524,5,47,0,0,524,525,5,42,0,
		0,525,529,1,0,0,0,526,528,9,0,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,
		530,1,0,0,0,529,527,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,533,5,
		42,0,0,533,534,5,47,0,0,534,535,1,0,0,0,535,536,6,75,0,0,536,152,1,0,0,
		0,13,0,453,460,468,474,476,482,487,493,498,504,518,529,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
