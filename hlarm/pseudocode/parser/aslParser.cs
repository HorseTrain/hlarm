//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from asl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class aslParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, IDENTIFIER=64, DECIMAL_NUMBER=65, 
		HEX_NUMBER=66, BINARY_NUMBER=67, TRUE_FALSE=68, STRING=69, BITS=70, WHITE_SPACE=71, 
		LINE_COMMENT=72, BLOB_COMMENT=73;
	public const int
		RULE_constantTest = 0, RULE_expressionTest = 1, RULE_lineTest = 2, RULE_sourceFile = 3, 
		RULE_lValueSet = 4, RULE_variableDeclaration = 5, RULE_line = 6, RULE_assertStatement = 7, 
		RULE_controlFlowStatements = 8, RULE_hardStatements = 9, RULE_enumerationDeclaration = 10, 
		RULE_typeMember = 11, RULE_typeArrayDeclaration = 12, RULE_typeDeclaration = 13, 
		RULE_emptyTypeDeclaration = 14, RULE_newTypeDeclaration = 15, RULE_oldTypeRedeclaration = 16, 
		RULE_forLoop = 17, RULE_caseStatement = 18, RULE_whenStatement = 19, RULE_ifStatement = 20, 
		RULE_elseStatement = 21, RULE_elseIfStatement = 22, RULE_returnStatement = 23, 
		RULE_whileStatement = 24, RULE_explicitFunctionDeclaration = 25, RULE_setExplicitFunctionDeclaration = 26, 
		RULE_normalExplicitFunctionDeclaration = 27, RULE_arrayDeclaration = 28, 
		RULE_commaSeperatedExpressionSingleton = 29, RULE_commaSeperatedExpressions = 30, 
		RULE_functionArguments = 31, RULE_parentheses = 32, RULE_edgeCases = 33, 
		RULE_bitAccessor = 34, RULE_bitFeild = 35, RULE_structAccessor = 36, RULE_partAccessor = 37, 
		RULE_baseExpression = 38, RULE_numberRange = 39, RULE_functionScriptOperations = 40, 
		RULE_unaryOperations = 41, RULE_exponentialOperations = 42, RULE_multiplicationOperations = 43, 
		RULE_additionOperations = 44, RULE_concatOperations = 45, RULE_shiftingOperations = 46, 
		RULE_comparisonOperations = 47, RULE_equalityOperations = 48, RULE_bitwiseAndOperation = 49, 
		RULE_bitwiseExclusiveOrOperation = 50, RULE_bitwiseOrOperation = 51, RULE_logicalAndOperation = 52, 
		RULE_logicalOrOperation = 53, RULE_smallTernaryOperation = 54, RULE_bigTernaryOperation = 55, 
		RULE_teranryOperation = 56, RULE_expression = 57, RULE_tupleSingle = 58, 
		RULE_tuple = 59, RULE_collection = 60, RULE_identifier = 61, RULE_type = 62, 
		RULE_tupleType = 63, RULE_constantType = 64, RULE_concreteTypes = 65, 
		RULE_dynamicTypes = 66, RULE_constant = 67;
	public static readonly string[] ruleNames = {
		"constantTest", "expressionTest", "lineTest", "sourceFile", "lValueSet", 
		"variableDeclaration", "line", "assertStatement", "controlFlowStatements", 
		"hardStatements", "enumerationDeclaration", "typeMember", "typeArrayDeclaration", 
		"typeDeclaration", "emptyTypeDeclaration", "newTypeDeclaration", "oldTypeRedeclaration", 
		"forLoop", "caseStatement", "whenStatement", "ifStatement", "elseStatement", 
		"elseIfStatement", "returnStatement", "whileStatement", "explicitFunctionDeclaration", 
		"setExplicitFunctionDeclaration", "normalExplicitFunctionDeclaration", 
		"arrayDeclaration", "commaSeperatedExpressionSingleton", "commaSeperatedExpressions", 
		"functionArguments", "parentheses", "edgeCases", "bitAccessor", "bitFeild", 
		"structAccessor", "partAccessor", "baseExpression", "numberRange", "functionScriptOperations", 
		"unaryOperations", "exponentialOperations", "multiplicationOperations", 
		"additionOperations", "concatOperations", "shiftingOperations", "comparisonOperations", 
		"equalityOperations", "bitwiseAndOperation", "bitwiseExclusiveOrOperation", 
		"bitwiseOrOperation", "logicalAndOperation", "logicalOrOperation", "smallTernaryOperation", 
		"bigTernaryOperation", "teranryOperation", "expression", "tupleSingle", 
		"tuple", "collection", "identifier", "type", "tupleType", "constantType", 
		"concreteTypes", "dynamicTypes", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'constant'", "'='", "'&'", "','", "';'", "'assert'", "'IMPLEMENTATION_DEFINED'", 
		"'UNDEFINED'", "'enumeration'", "'{'", "'}'", "'array'", "'of'", "'type'", 
		"'is'", "'('", "')'", "'for'", "'to'", "'downto'", "'case'", "'when'", 
		"'if'", "'then'", "'else'", "'elsif'", "'return'", "'while'", "'do'", 
		"'['", "']'", "'UNKNOWN'", "'<'", "'>'", "'+'", "'-'", "':'", "'.'", "'..'", 
		"'IN'", "'!'", "'NOT'", "'^'", "'*'", "'/'", "'DIV'", "'MOD'", "'<<'", 
		"'>>'", "'<='", "'>='", "'!='", "'=='", "'AND'", "'EOR'", "'OR'", "'&&'", 
		"'||'", "'boolean'", "'integer'", "'bit'", "'real'", "'bits'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "IDENTIFIER", "DECIMAL_NUMBER", "HEX_NUMBER", 
		"BINARY_NUMBER", "TRUE_FALSE", "STRING", "BITS", "WHITE_SPACE", "LINE_COMMENT", 
		"BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "asl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static aslParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public aslParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public aslParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ConstantTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ConstantTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConstantTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConstantTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantTestContext constantTest() {
		ConstantTestContext _localctx = new ConstantTestContext(Context, State);
		EnterRule(_localctx, 0, RULE_constantTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 47L) != 0)) {
				{
				{
				State = 136;
				constant();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExpressionTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExpressionTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionTestContext expressionTest() {
		ExpressionTestContext _localctx = new ExpressionTestContext(Context, State);
		EnterRule(_localctx, 2, RULE_expressionTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576454086505725942L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 95L) != 0)) {
				{
				{
				State = 144;
				expression();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public LineTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLineTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLineTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTestContext lineTest() {
		LineTestContext _localctx = new LineTestContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576454085995834422L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 95L) != 0)) {
				{
				{
				State = 152;
				line();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 6, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576454085995834422L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 95L) != 0)) {
				{
				{
				State = 160;
				line();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 166;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLValueSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLValueSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 8, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 168;
				Match(T__0);
				}
				break;
			}
			State = 171;
			expression();
			State = 172;
			Match(T__1);
			State = 173;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			type();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 176;
				Match(T__2);
				}
			}

			State = 179;
			identifier();
			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 180;
					Match(T__3);
					State = 181;
					identifier();
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 187;
				Match(T__1);
				State = 188;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationDeclarationContext enumerationDeclaration() {
			return GetRuleContext<EnumerationDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HardStatementsContext hardStatements() {
			return GetRuleContext<HardStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlFlowStatementsContext controlFlowStatements() {
			return GetRuleContext<ControlFlowStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitFunctionDeclarationContext explicitFunctionDeclaration() {
			return GetRuleContext<ExplicitFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 12, RULE_line);
		int _la;
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 191;
					lValueSet();
					}
					break;
				case 2:
					{
					State = 192;
					variableDeclaration();
					}
					break;
				case 3:
					{
					State = 193;
					returnStatement();
					}
					break;
				case 4:
					{
					State = 194;
					assertStatement();
					}
					break;
				case 5:
					{
					State = 195;
					enumerationDeclaration();
					}
					break;
				case 6:
					{
					State = 196;
					arrayDeclaration();
					}
					break;
				case 7:
					{
					State = 197;
					hardStatements();
					}
					break;
				}
				State = 200;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				controlFlowStatements();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				explicitFunctionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204;
				typeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				expression();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 206;
					Match(T__4);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_assertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__5);
			State = 212;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlFlowStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenStatementContext whenStatement() {
			return GetRuleContext<WhenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public ControlFlowStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlFlowStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterControlFlowStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitControlFlowStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlFlowStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlFlowStatementsContext controlFlowStatements() {
		ControlFlowStatementsContext _localctx = new ControlFlowStatementsContext(Context, State);
		EnterRule(_localctx, 16, RULE_controlFlowStatements);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				ifStatement();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				elseStatement();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				elseIfStatement();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217;
				whileStatement();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 5);
				{
				State = 218;
				caseStatement();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 6);
				{
				State = 219;
				whenStatement();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 7);
				{
				State = 220;
				forLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HardStatementsContext : ParserRuleContext {
		public HardStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hardStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterHardStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitHardStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHardStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HardStatementsContext hardStatements() {
		HardStatementsContext _localctx = new HardStatementsContext(Context, State);
		EnterRule(_localctx, 18, RULE_hardStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EnumerationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEnumerationDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEnumerationDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationDeclarationContext enumerationDeclaration() {
		EnumerationDeclarationContext _localctx = new EnumerationDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumerationDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(T__8);
			State = 226;
			identifier();
			State = 227;
			Match(T__9);
			State = 228;
			identifier();
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					Match(T__3);
					State = 230;
					identifier();
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 236;
				Match(T__3);
				}
			}

			State = 239;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArrayDeclarationContext typeArrayDeclaration() {
			return GetRuleContext<TypeArrayDeclarationContext>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeMember);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__15:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				variableDeclaration();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				typeArrayDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTypeArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTypeArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArrayDeclarationContext typeArrayDeclaration() {
		TypeArrayDeclarationContext _localctx = new TypeArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeArrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__11);
			State = 246;
			numberRange();
			State = 247;
			Match(T__12);
			State = 248;
			type();
			State = 249;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewTypeDeclarationContext newTypeDeclaration() {
			return GetRuleContext<NewTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OldTypeRedeclarationContext oldTypeRedeclaration() {
			return GetRuleContext<OldTypeRedeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyTypeDeclarationContext emptyTypeDeclaration() {
			return GetRuleContext<EmptyTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeDeclaration);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				newTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				oldTypeRedeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 253;
				emptyTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EmptyTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEmptyTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEmptyTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyTypeDeclarationContext emptyTypeDeclaration() {
		EmptyTypeDeclarationContext _localctx = new EmptyTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_emptyTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(T__13);
			State = 257;
			identifier();
			State = 258;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		public NewTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterNewTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitNewTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewTypeDeclarationContext newTypeDeclaration() {
		NewTypeDeclarationContext _localctx = new NewTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_newTypeDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(T__13);
			State = 261;
			identifier();
			State = 262;
			Match(T__14);
			State = 263;
			Match(T__15);
			State = 264;
			typeMember();
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 265;
					Match(T__3);
					State = 266;
					typeMember();
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 272;
				Match(T__3);
				}
			}

			State = 275;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OldTypeRedeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OldTypeRedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oldTypeRedeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterOldTypeRedeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitOldTypeRedeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOldTypeRedeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OldTypeRedeclarationContext oldTypeRedeclaration() {
		OldTypeRedeclarationContext _localctx = new OldTypeRedeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_oldTypeRedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__13);
			State = 278;
			identifier();
			State = 279;
			Match(T__1);
			State = 280;
			type();
			State = 281;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 34, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__17);
			State = 284;
			lValueSet();
			State = 285;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 286;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_caseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(T__20);
			State = 289;
			expression();
			State = 290;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WhenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterWhenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitWhenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenStatementContext whenStatement() {
		WhenStatementContext _localctx = new WhenStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_whenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(T__21);
			State = 293;
			expression();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 294;
				Match(T__3);
				State = 295;
				expression();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__22);
			State = 302;
			expression();
			State = 303;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__25);
			State = 308;
			expression();
			State = 309;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__26);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576454086505725942L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 95L) != 0)) {
				{
				State = 312;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(T__27);
			State = 316;
			expression();
			State = 317;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalExplicitFunctionDeclarationContext normalExplicitFunctionDeclaration() {
			return GetRuleContext<NormalExplicitFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExplicitFunctionDeclarationContext setExplicitFunctionDeclaration() {
			return GetRuleContext<SetExplicitFunctionDeclarationContext>(0);
		}
		public ExplicitFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitFunctionDeclarationContext explicitFunctionDeclaration() {
		ExplicitFunctionDeclarationContext _localctx = new ExplicitFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_explicitFunctionDeclaration);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				normalExplicitFunctionDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				setExplicitFunctionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExplicitFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations() {
			return GetRuleContext<FunctionScriptOperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public SetExplicitFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExplicitFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSetExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSetExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExplicitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExplicitFunctionDeclarationContext setExplicitFunctionDeclaration() {
		SetExplicitFunctionDeclarationContext _localctx = new SetExplicitFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_setExplicitFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			functionScriptOperations();
			State = 324;
			Match(T__1);
			State = 325;
			variableDeclaration();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 326;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalExplicitFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations() {
			return GetRuleContext<FunctionScriptOperationsContext>(0);
		}
		public NormalExplicitFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalExplicitFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterNormalExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitNormalExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalExplicitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalExplicitFunctionDeclarationContext normalExplicitFunctionDeclaration() {
		NormalExplicitFunctionDeclarationContext _localctx = new NormalExplicitFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_normalExplicitFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			type();
			State = 330;
			functionScriptOperations();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 331;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayDeclaration);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				Match(T__11);
				State = 335;
				type();
				State = 336;
				identifier();
				State = 337;
				numberRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				Match(T__11);
				State = 340;
				numberRange();
				State = 341;
				Match(T__12);
				State = 342;
				type();
				State = 343;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaSeperatedExpressionSingletonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public CommaSeperatedExpressionSingletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaSeperatedExpressionSingleton; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCommaSeperatedExpressionSingleton(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCommaSeperatedExpressionSingleton(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaSeperatedExpressionSingleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaSeperatedExpressionSingletonContext commaSeperatedExpressionSingleton() {
		CommaSeperatedExpressionSingletonContext _localctx = new CommaSeperatedExpressionSingletonContext(Context, State);
		EnterRule(_localctx, 58, RULE_commaSeperatedExpressionSingleton);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				variableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaSeperatedExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaSeperatedExpressionSingletonContext[] commaSeperatedExpressionSingleton() {
			return GetRuleContexts<CommaSeperatedExpressionSingletonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaSeperatedExpressionSingletonContext commaSeperatedExpressionSingleton(int i) {
			return GetRuleContext<CommaSeperatedExpressionSingletonContext>(i);
		}
		public CommaSeperatedExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaSeperatedExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCommaSeperatedExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCommaSeperatedExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaSeperatedExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaSeperatedExpressionsContext commaSeperatedExpressions() {
		CommaSeperatedExpressionsContext _localctx = new CommaSeperatedExpressionsContext(Context, State);
		EnterRule(_localctx, 60, RULE_commaSeperatedExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			commaSeperatedExpressionSingleton();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 352;
				Match(T__3);
				State = 353;
				commaSeperatedExpressionSingleton();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaSeperatedExpressionsContext commaSeperatedExpressions() {
			return GetRuleContext<CommaSeperatedExpressionsContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionArguments);
		int _la;
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				Match(T__15);
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576454086505725942L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 95L) != 0)) {
					{
					State = 360;
					commaSeperatedExpressions();
					}
				}

				State = 363;
				Match(T__16);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				Match(T__29);
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576454086505725942L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 95L) != 0)) {
					{
					State = 365;
					commaSeperatedExpressions();
					}
				}

				State = 368;
				Match(T__30);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 64, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(T__15);
			State = 372;
			expression();
			State = 373;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeCasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(aslParser.STRING, 0); }
		public EdgeCasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeCases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEdgeCases(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEdgeCases(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeCasesContext edgeCases() {
		EdgeCasesContext _localctx = new EdgeCasesContext(Context, State);
		EnterRule(_localctx, 66, RULE_edgeCases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			type();
			State = 376;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__31) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 377;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitFeildContext[] bitFeild() {
			return GetRuleContexts<BitFeildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitFeildContext bitFeild(int i) {
			return GetRuleContext<BitFeildContext>(i);
		}
		public BitAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitAccessorContext bitAccessor() {
		BitAccessorContext _localctx = new BitAccessorContext(Context, State);
		EnterRule(_localctx, 68, RULE_bitAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(T__32);
			State = 381;
			bitFeild();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 382;
				Match(T__3);
				State = 383;
				bitFeild();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitFeildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext[] additionOperations() {
			return GetRuleContexts<AdditionOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext additionOperations(int i) {
			return GetRuleContext<AdditionOperationsContext>(i);
		}
		public BitFeildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitFeild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitFeild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitFeild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitFeild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitFeildContext bitFeild() {
		BitFeildContext _localctx = new BitFeildContext(Context, State);
		EnterRule(_localctx, 70, RULE_bitFeild);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			additionOperations();
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) {
				{
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34 || _la==T__35) {
					{
					State = 392;
					_la = TokenStream.LA(1);
					if ( !(_la==T__34 || _la==T__35) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 395;
				Match(T__36);
				State = 396;
				additionOperations();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public StructAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterStructAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitStructAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructAccessorContext structAccessor() {
		StructAccessorContext _localctx = new StructAccessorContext(Context, State);
		EnterRule(_localctx, 72, RULE_structAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(T__37);
			State = 400;
			Match(T__32);
			State = 401;
			identifier();
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 402;
				Match(T__3);
				State = 403;
				identifier();
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 409;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitAccessorContext bitAccessor() {
			return GetRuleContext<BitAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAccessorContext structAccessor() {
			return GetRuleContext<StructAccessorContext>(0);
		}
		public PartAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterPartAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitPartAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartAccessorContext partAccessor() {
		PartAccessorContext _localctx = new PartAccessorContext(Context, State);
		EnterRule(_localctx, 74, RULE_partAccessor);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411;
				bitAccessor();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				structAccessor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeCasesContext edgeCases() {
			return GetRuleContext<EdgeCasesContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_baseExpression);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417;
				parentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418;
				tuple();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 419;
				edgeCases();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumberRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterNumberRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitNumberRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberRangeContext numberRange() {
		NumberRangeContext _localctx = new NumberRangeContext(Context, State);
		EnterRule(_localctx, 78, RULE_numberRange);
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				Match(T__29);
				State = 423;
				expression();
				State = 424;
				Match(T__38);
				State = 425;
				expression();
				State = 426;
				Match(T__30);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428;
				Match(T__9);
				State = 429;
				expression();
				State = 430;
				Match(T__38);
				State = 431;
				expression();
				State = 432;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionScriptOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext[] functionArguments() {
			return GetRuleContexts<FunctionArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments(int i) {
			return GetRuleContext<FunctionArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartAccessorContext[] partAccessor() {
			return GetRuleContexts<PartAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartAccessorContext partAccessor(int i) {
			return GetRuleContext<PartAccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext[] functionScriptOperations() {
			return GetRuleContexts<FunctionScriptOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations(int i) {
			return GetRuleContext<FunctionScriptOperationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext[] collection() {
			return GetRuleContexts<CollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection(int i) {
			return GetRuleContext<CollectionContext>(i);
		}
		public FunctionScriptOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionScriptOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterFunctionScriptOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitFunctionScriptOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionScriptOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionScriptOperationsContext functionScriptOperations() {
		FunctionScriptOperationsContext _localctx = new FunctionScriptOperationsContext(Context, State);
		EnterRule(_localctx, 80, RULE_functionScriptOperations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			baseExpression();
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						State = 437;
						functionArguments();
						}
						break;
					case 2:
						{
						{
						State = 438;
						Match(T__37);
						State = 439;
						functionScriptOperations();
						}
						}
						break;
					case 3:
						{
						{
						State = 440;
						Match(T__39);
						State = 441;
						collection();
						}
						}
						break;
					case 4:
						{
						State = 442;
						partAccessor();
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations() {
			return GetRuleContext<FunctionScriptOperationsContext>(0);
		}
		public UnaryOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterUnaryOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitUnaryOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperationsContext unaryOperations() {
		UnaryOperationsContext _localctx = new UnaryOperationsContext(Context, State);
		EnterRule(_localctx, 82, RULE_unaryOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6665789243400L) != 0)) {
				{
				{
				State = 448;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6665789243400L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 454;
			functionScriptOperations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentialOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperationsContext[] unaryOperations() {
			return GetRuleContexts<UnaryOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperationsContext unaryOperations(int i) {
			return GetRuleContext<UnaryOperationsContext>(i);
		}
		public ExponentialOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentialOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExponentialOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExponentialOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentialOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentialOperationsContext exponentialOperations() {
		ExponentialOperationsContext _localctx = new ExponentialOperationsContext(Context, State);
		EnterRule(_localctx, 84, RULE_exponentialOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			unaryOperations();
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__42) {
				{
				{
				State = 457;
				Match(T__42);
				State = 458;
				unaryOperations();
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExponentialOperationsContext[] exponentialOperations() {
			return GetRuleContexts<ExponentialOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentialOperationsContext exponentialOperations(int i) {
			return GetRuleContext<ExponentialOperationsContext>(i);
		}
		public MultiplicationOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterMultiplicationOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitMultiplicationOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationOperationsContext multiplicationOperations() {
		MultiplicationOperationsContext _localctx = new MultiplicationOperationsContext(Context, State);
		EnterRule(_localctx, 86, RULE_multiplicationOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			exponentialOperations();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 263882790666240L) != 0)) {
				{
				{
				State = 465;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 263882790666240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 466;
				exponentialOperations();
				}
				}
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationOperationsContext[] multiplicationOperations() {
			return GetRuleContexts<MultiplicationOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationOperationsContext multiplicationOperations(int i) {
			return GetRuleContext<MultiplicationOperationsContext>(i);
		}
		public AdditionOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterAdditionOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitAdditionOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOperationsContext additionOperations() {
		AdditionOperationsContext _localctx = new AdditionOperationsContext(Context, State);
		EnterRule(_localctx, 88, RULE_additionOperations);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			multiplicationOperations();
			State = 477;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 473;
					_la = TokenStream.LA(1);
					if ( !(_la==T__34 || _la==T__35) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 474;
					multiplicationOperations();
					}
					} 
				}
				State = 479;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext[] additionOperations() {
			return GetRuleContexts<AdditionOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext additionOperations(int i) {
			return GetRuleContext<AdditionOperationsContext>(i);
		}
		public ConcatOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConcatOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConcatOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatOperationsContext concatOperations() {
		ConcatOperationsContext _localctx = new ConcatOperationsContext(Context, State);
		EnterRule(_localctx, 90, RULE_concatOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			additionOperations();
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__36) {
				{
				{
				State = 481;
				Match(T__36);
				State = 482;
				additionOperations();
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftingOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatOperationsContext[] concatOperations() {
			return GetRuleContexts<ConcatOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatOperationsContext concatOperations(int i) {
			return GetRuleContext<ConcatOperationsContext>(i);
		}
		public ShiftingOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftingOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterShiftingOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitShiftingOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftingOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftingOperationsContext shiftingOperations() {
		ShiftingOperationsContext _localctx = new ShiftingOperationsContext(Context, State);
		EnterRule(_localctx, 92, RULE_shiftingOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			concatOperations();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47 || _la==T__48) {
				{
				{
				State = 489;
				_la = TokenStream.LA(1);
				if ( !(_la==T__47 || _la==T__48) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 490;
				concatOperations();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftingOperationsContext[] shiftingOperations() {
			return GetRuleContexts<ShiftingOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftingOperationsContext shiftingOperations(int i) {
			return GetRuleContext<ShiftingOperationsContext>(i);
		}
		public ComparisonOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterComparisonOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitComparisonOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperationsContext comparisonOperations() {
		ComparisonOperationsContext _localctx = new ComparisonOperationsContext(Context, State);
		EnterRule(_localctx, 94, RULE_comparisonOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			shiftingOperations();
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377725490331648L) != 0)) {
				{
				{
				State = 497;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377725490331648L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 498;
				shiftingOperations();
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperationsContext[] comparisonOperations() {
			return GetRuleContexts<ComparisonOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperationsContext comparisonOperations(int i) {
			return GetRuleContext<ComparisonOperationsContext>(i);
		}
		public EqualityOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEqualityOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEqualityOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperationsContext equalityOperations() {
		EqualityOperationsContext _localctx = new EqualityOperationsContext(Context, State);
		EnterRule(_localctx, 96, RULE_equalityOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			comparisonOperations();
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__51 || _la==T__52) {
				{
				{
				State = 505;
				_la = TokenStream.LA(1);
				if ( !(_la==T__51 || _la==T__52) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 506;
				comparisonOperations();
				}
				}
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperationsContext[] equalityOperations() {
			return GetRuleContexts<EqualityOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperationsContext equalityOperations(int i) {
			return GetRuleContext<EqualityOperationsContext>(i);
		}
		public BitwiseAndOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitwiseAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitwiseAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndOperationContext bitwiseAndOperation() {
		BitwiseAndOperationContext _localctx = new BitwiseAndOperationContext(Context, State);
		EnterRule(_localctx, 98, RULE_bitwiseAndOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			equalityOperations();
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__53) {
				{
				{
				State = 513;
				Match(T__53);
				State = 514;
				equalityOperations();
				}
				}
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseExclusiveOrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndOperationContext[] bitwiseAndOperation() {
			return GetRuleContexts<BitwiseAndOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndOperationContext bitwiseAndOperation(int i) {
			return GetRuleContext<BitwiseAndOperationContext>(i);
		}
		public BitwiseExclusiveOrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseExclusiveOrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitwiseExclusiveOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitwiseExclusiveOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExclusiveOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseExclusiveOrOperationContext bitwiseExclusiveOrOperation() {
		BitwiseExclusiveOrOperationContext _localctx = new BitwiseExclusiveOrOperationContext(Context, State);
		EnterRule(_localctx, 100, RULE_bitwiseExclusiveOrOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			bitwiseAndOperation();
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__54) {
				{
				{
				State = 521;
				Match(T__54);
				State = 522;
				bitwiseAndOperation();
				}
				}
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseExclusiveOrOperationContext[] bitwiseExclusiveOrOperation() {
			return GetRuleContexts<BitwiseExclusiveOrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseExclusiveOrOperationContext bitwiseExclusiveOrOperation(int i) {
			return GetRuleContext<BitwiseExclusiveOrOperationContext>(i);
		}
		public BitwiseOrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOperationContext bitwiseOrOperation() {
		BitwiseOrOperationContext _localctx = new BitwiseOrOperationContext(Context, State);
		EnterRule(_localctx, 102, RULE_bitwiseOrOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			bitwiseExclusiveOrOperation();
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__55) {
				{
				{
				State = 529;
				Match(T__55);
				State = 530;
				bitwiseExclusiveOrOperation();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrOperationContext[] bitwiseOrOperation() {
			return GetRuleContexts<BitwiseOrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrOperationContext bitwiseOrOperation(int i) {
			return GetRuleContext<BitwiseOrOperationContext>(i);
		}
		public LogicalAndOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLogicalAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLogicalAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndOperationContext logicalAndOperation() {
		LogicalAndOperationContext _localctx = new LogicalAndOperationContext(Context, State);
		EnterRule(_localctx, 104, RULE_logicalAndOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			bitwiseOrOperation();
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__56) {
				{
				{
				State = 537;
				Match(T__56);
				State = 538;
				bitwiseOrOperation();
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndOperationContext[] logicalAndOperation() {
			return GetRuleContexts<LogicalAndOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndOperationContext logicalAndOperation(int i) {
			return GetRuleContext<LogicalAndOperationContext>(i);
		}
		public LogicalOrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLogicalOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLogicalOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrOperationContext logicalOrOperation() {
		LogicalOrOperationContext _localctx = new LogicalOrOperationContext(Context, State);
		EnterRule(_localctx, 106, RULE_logicalOrOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			logicalAndOperation();
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__57) {
				{
				{
				State = 545;
				Match(T__57);
				State = 546;
				logicalAndOperation();
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SmallTernaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SmallTernaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smallTernaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSmallTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSmallTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallTernaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SmallTernaryOperationContext smallTernaryOperation() {
		SmallTernaryOperationContext _localctx = new SmallTernaryOperationContext(Context, State);
		EnterRule(_localctx, 108, RULE_smallTernaryOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(T__22);
			State = 553;
			expression();
			State = 554;
			Match(T__23);
			State = 555;
			expression();
			State = 556;
			Match(T__24);
			State = 557;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigTernaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BigTernaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigTernaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBigTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBigTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigTernaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigTernaryOperationContext bigTernaryOperation() {
		BigTernaryOperationContext _localctx = new BigTernaryOperationContext(Context, State);
		EnterRule(_localctx, 110, RULE_bigTernaryOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(T__22);
			State = 560;
			expression();
			State = 561;
			Match(T__23);
			State = 562;
			expression();
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 563;
				Match(T__25);
				State = 564;
				expression();
				State = 565;
				Match(T__23);
				State = 566;
				expression();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 573;
			Match(T__24);
			State = 574;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeranryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BigTernaryOperationContext bigTernaryOperation() {
			return GetRuleContext<BigTernaryOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SmallTernaryOperationContext smallTernaryOperation() {
			return GetRuleContext<SmallTernaryOperationContext>(0);
		}
		public TeranryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teranryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTeranryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTeranryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeranryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeranryOperationContext teranryOperation() {
		TeranryOperationContext _localctx = new TeranryOperationContext(Context, State);
		EnterRule(_localctx, 112, RULE_teranryOperation);
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576;
				bigTernaryOperation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577;
				smallTernaryOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrOperationContext logicalOrOperation() {
			return GetRuleContext<LogicalOrOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeranryOperationContext teranryOperation() {
			return GetRuleContext<TeranryOperationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_expression);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__2:
			case T__15:
			case T__35:
			case T__40:
			case T__41:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case IDENTIFIER:
			case DECIMAL_NUMBER:
			case HEX_NUMBER:
			case BINARY_NUMBER:
			case TRUE_FALSE:
			case BITS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580;
				logicalOrOperation();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581;
				teranryOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleSingleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleSingleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleSingle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTupleSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTupleSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleSingleContext tupleSingle() {
		TupleSingleContext _localctx = new TupleSingleContext(Context, State);
		EnterRule(_localctx, 116, RULE_tupleSingle);
		try {
			State = 586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				Match(T__35);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleSingleContext[] tupleSingle() {
			return GetRuleContexts<TupleSingleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleSingleContext tupleSingle(int i) {
			return GetRuleContext<TupleSingleContext>(i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 118, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(T__15);
			State = 589;
			tupleSingle();
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 590;
				Match(T__3);
				State = 591;
				tupleSingle();
				}
				}
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 596;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 120, RULE_collection);
		int _la;
		try {
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598;
				Match(T__9);
				State = 599;
				expression();
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 600;
					Match(T__3);
					State = 601;
					expression();
					}
					}
					State = 606;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 607;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609;
				numberRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(aslParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 122, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcreteTypesContext concreteTypes() {
			return GetRuleContext<ConcreteTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicTypesContext dynamicTypes() {
			return GetRuleContext<DynamicTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantTypeContext constantType() {
			return GetRuleContext<ConstantTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_type);
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__58:
			case T__59:
			case T__60:
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				concreteTypes();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				dynamicTypes();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616;
				identifier();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 4);
				{
				State = 617;
				constantType();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 618;
				tupleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(T__15);
			State = 622;
			type();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 623;
				Match(T__3);
				State = 624;
				type();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 629;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConstantType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConstantType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantTypeContext constantType() {
		ConstantTypeContext _localctx = new ConstantTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_constantType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(T__0);
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 632;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcreteTypesContext : ParserRuleContext {
		public ConcreteTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concreteTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConcreteTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConcreteTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcreteTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcreteTypesContext concreteTypes() {
		ConcreteTypesContext _localctx = new ConcreteTypesContext(Context, State);
		EnterRule(_localctx, 130, RULE_concreteTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646911284551352320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DynamicTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterDynamicTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitDynamicTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicTypesContext dynamicTypes() {
		DynamicTypesContext _localctx = new DynamicTypesContext(Context, State);
		EnterRule(_localctx, 132, RULE_dynamicTypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(T__62);
			State = 638;
			Match(T__15);
			State = 639;
			expression();
			State = 640;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(aslParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(aslParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_NUMBER() { return GetToken(aslParser.BINARY_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_FALSE() { return GetToken(aslParser.TRUE_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITS() { return GetToken(aslParser.BITS, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 134, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 47L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,73,645,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,5,0,138,8,0,10,0,12,0,141,
		9,0,1,0,1,0,1,1,5,1,146,8,1,10,1,12,1,149,9,1,1,1,1,1,1,2,5,2,154,8,2,
		10,2,12,2,157,9,2,1,2,1,2,1,3,5,3,162,8,3,10,3,12,3,165,9,3,1,3,1,3,1,
		4,3,4,170,8,4,1,4,1,4,1,4,1,4,1,5,1,5,3,5,178,8,5,1,5,1,5,1,5,5,5,183,
		8,5,10,5,12,5,186,9,5,1,5,1,5,3,5,190,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		3,6,199,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,208,8,6,3,6,210,8,6,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,222,8,8,1,9,1,9,1,10,1,10,1,10,1,
		10,1,10,1,10,5,10,232,8,10,10,10,12,10,235,9,10,1,10,3,10,238,8,10,1,10,
		1,10,1,11,1,11,3,11,244,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
		13,3,13,255,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		5,15,268,8,15,10,15,12,15,271,9,15,1,15,3,15,274,8,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
		19,1,19,1,19,1,19,5,19,297,8,19,10,19,12,19,300,9,19,1,20,1,20,1,20,1,
		20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,3,23,314,8,23,1,24,1,24,1,24,
		1,24,1,25,1,25,3,25,322,8,25,1,26,1,26,1,26,1,26,3,26,328,8,26,1,27,1,
		27,1,27,3,27,333,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,3,28,346,8,28,1,29,1,29,3,29,350,8,29,1,30,1,30,1,30,5,30,355,8,30,
		10,30,12,30,358,9,30,1,31,1,31,3,31,362,8,31,1,31,1,31,1,31,3,31,367,8,
		31,1,31,3,31,370,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,3,33,379,8,33,
		1,34,1,34,1,34,1,34,5,34,385,8,34,10,34,12,34,388,9,34,1,34,1,34,1,35,
		1,35,3,35,394,8,35,1,35,1,35,3,35,398,8,35,1,36,1,36,1,36,1,36,1,36,5,
		36,405,8,36,10,36,12,36,408,9,36,1,36,1,36,1,37,1,37,3,37,414,8,37,1,38,
		1,38,1,38,1,38,1,38,3,38,421,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,3,39,435,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
		5,40,444,8,40,10,40,12,40,447,9,40,1,41,5,41,450,8,41,10,41,12,41,453,
		9,41,1,41,1,41,1,42,1,42,1,42,5,42,460,8,42,10,42,12,42,463,9,42,1,43,
		1,43,1,43,5,43,468,8,43,10,43,12,43,471,9,43,1,44,1,44,1,44,5,44,476,8,
		44,10,44,12,44,479,9,44,1,45,1,45,1,45,5,45,484,8,45,10,45,12,45,487,9,
		45,1,46,1,46,1,46,5,46,492,8,46,10,46,12,46,495,9,46,1,47,1,47,1,47,5,
		47,500,8,47,10,47,12,47,503,9,47,1,48,1,48,1,48,5,48,508,8,48,10,48,12,
		48,511,9,48,1,49,1,49,1,49,5,49,516,8,49,10,49,12,49,519,9,49,1,50,1,50,
		1,50,5,50,524,8,50,10,50,12,50,527,9,50,1,51,1,51,1,51,5,51,532,8,51,10,
		51,12,51,535,9,51,1,52,1,52,1,52,5,52,540,8,52,10,52,12,52,543,9,52,1,
		53,1,53,1,53,5,53,548,8,53,10,53,12,53,551,9,53,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,569,8,55,
		10,55,12,55,572,9,55,1,55,1,55,1,55,1,56,1,56,3,56,579,8,56,1,57,1,57,
		3,57,583,8,57,1,58,1,58,3,58,587,8,58,1,59,1,59,1,59,1,59,4,59,593,8,59,
		11,59,12,59,594,1,59,1,59,1,60,1,60,1,60,1,60,5,60,603,8,60,10,60,12,60,
		606,9,60,1,60,1,60,1,60,3,60,611,8,60,1,61,1,61,1,62,1,62,1,62,1,62,1,
		62,3,62,620,8,62,1,63,1,63,1,63,1,63,4,63,626,8,63,11,63,12,63,627,1,63,
		1,63,1,64,1,64,3,64,634,8,64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,
		67,1,67,0,0,68,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,0,11,1,0,7,8,1,0,19,20,2,0,7,7,32,32,1,0,35,36,3,0,
		3,3,36,36,41,42,1,0,44,47,1,0,48,49,2,0,33,34,50,51,1,0,52,53,1,0,59,62,
		2,0,65,68,70,70,660,0,139,1,0,0,0,2,147,1,0,0,0,4,155,1,0,0,0,6,163,1,
		0,0,0,8,169,1,0,0,0,10,175,1,0,0,0,12,209,1,0,0,0,14,211,1,0,0,0,16,221,
		1,0,0,0,18,223,1,0,0,0,20,225,1,0,0,0,22,243,1,0,0,0,24,245,1,0,0,0,26,
		254,1,0,0,0,28,256,1,0,0,0,30,260,1,0,0,0,32,277,1,0,0,0,34,283,1,0,0,
		0,36,288,1,0,0,0,38,292,1,0,0,0,40,301,1,0,0,0,42,305,1,0,0,0,44,307,1,
		0,0,0,46,311,1,0,0,0,48,315,1,0,0,0,50,321,1,0,0,0,52,323,1,0,0,0,54,329,
		1,0,0,0,56,345,1,0,0,0,58,349,1,0,0,0,60,351,1,0,0,0,62,369,1,0,0,0,64,
		371,1,0,0,0,66,375,1,0,0,0,68,380,1,0,0,0,70,391,1,0,0,0,72,399,1,0,0,
		0,74,413,1,0,0,0,76,420,1,0,0,0,78,434,1,0,0,0,80,436,1,0,0,0,82,451,1,
		0,0,0,84,456,1,0,0,0,86,464,1,0,0,0,88,472,1,0,0,0,90,480,1,0,0,0,92,488,
		1,0,0,0,94,496,1,0,0,0,96,504,1,0,0,0,98,512,1,0,0,0,100,520,1,0,0,0,102,
		528,1,0,0,0,104,536,1,0,0,0,106,544,1,0,0,0,108,552,1,0,0,0,110,559,1,
		0,0,0,112,578,1,0,0,0,114,582,1,0,0,0,116,586,1,0,0,0,118,588,1,0,0,0,
		120,610,1,0,0,0,122,612,1,0,0,0,124,619,1,0,0,0,126,621,1,0,0,0,128,631,
		1,0,0,0,130,635,1,0,0,0,132,637,1,0,0,0,134,642,1,0,0,0,136,138,3,134,
		67,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,
		142,1,0,0,0,141,139,1,0,0,0,142,143,5,0,0,1,143,1,1,0,0,0,144,146,3,114,
		57,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
		150,1,0,0,0,149,147,1,0,0,0,150,151,5,0,0,1,151,3,1,0,0,0,152,154,3,12,
		6,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,
		158,1,0,0,0,157,155,1,0,0,0,158,159,5,0,0,1,159,5,1,0,0,0,160,162,3,12,
		6,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,
		166,1,0,0,0,165,163,1,0,0,0,166,167,5,0,0,1,167,7,1,0,0,0,168,170,5,1,
		0,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,3,114,57,0,
		172,173,5,2,0,0,173,174,3,114,57,0,174,9,1,0,0,0,175,177,3,124,62,0,176,
		178,5,3,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,184,3,
		122,61,0,180,181,5,4,0,0,181,183,3,122,61,0,182,180,1,0,0,0,183,186,1,
		0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,189,1,0,0,0,186,184,1,0,0,0,
		187,188,5,2,0,0,188,190,3,114,57,0,189,187,1,0,0,0,189,190,1,0,0,0,190,
		11,1,0,0,0,191,199,3,8,4,0,192,199,3,10,5,0,193,199,3,46,23,0,194,199,
		3,14,7,0,195,199,3,20,10,0,196,199,3,56,28,0,197,199,3,18,9,0,198,191,
		1,0,0,0,198,192,1,0,0,0,198,193,1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,
		0,198,196,1,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,201,5,5,0,0,201,
		210,1,0,0,0,202,210,3,16,8,0,203,210,3,50,25,0,204,210,3,26,13,0,205,207,
		3,114,57,0,206,208,5,5,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,210,1,0,
		0,0,209,198,1,0,0,0,209,202,1,0,0,0,209,203,1,0,0,0,209,204,1,0,0,0,209,
		205,1,0,0,0,210,13,1,0,0,0,211,212,5,6,0,0,212,213,3,114,57,0,213,15,1,
		0,0,0,214,222,3,40,20,0,215,222,3,42,21,0,216,222,3,44,22,0,217,222,3,
		48,24,0,218,222,3,36,18,0,219,222,3,38,19,0,220,222,3,34,17,0,221,214,
		1,0,0,0,221,215,1,0,0,0,221,216,1,0,0,0,221,217,1,0,0,0,221,218,1,0,0,
		0,221,219,1,0,0,0,221,220,1,0,0,0,222,17,1,0,0,0,223,224,7,0,0,0,224,19,
		1,0,0,0,225,226,5,9,0,0,226,227,3,122,61,0,227,228,5,10,0,0,228,233,3,
		122,61,0,229,230,5,4,0,0,230,232,3,122,61,0,231,229,1,0,0,0,232,235,1,
		0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,
		236,238,5,4,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,
		5,11,0,0,240,21,1,0,0,0,241,244,3,10,5,0,242,244,3,24,12,0,243,241,1,0,
		0,0,243,242,1,0,0,0,244,23,1,0,0,0,245,246,5,12,0,0,246,247,3,78,39,0,
		247,248,5,13,0,0,248,249,3,124,62,0,249,250,3,122,61,0,250,25,1,0,0,0,
		251,255,3,30,15,0,252,255,3,32,16,0,253,255,3,28,14,0,254,251,1,0,0,0,
		254,252,1,0,0,0,254,253,1,0,0,0,255,27,1,0,0,0,256,257,5,14,0,0,257,258,
		3,122,61,0,258,259,5,5,0,0,259,29,1,0,0,0,260,261,5,14,0,0,261,262,3,122,
		61,0,262,263,5,15,0,0,263,264,5,16,0,0,264,269,3,22,11,0,265,266,5,4,0,
		0,266,268,3,22,11,0,267,265,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,
		270,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,272,274,5,4,0,0,273,272,1,
		0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,5,17,0,0,276,31,1,0,0,0,
		277,278,5,14,0,0,278,279,3,122,61,0,279,280,5,2,0,0,280,281,3,124,62,0,
		281,282,5,5,0,0,282,33,1,0,0,0,283,284,5,18,0,0,284,285,3,8,4,0,285,286,
		7,1,0,0,286,287,3,114,57,0,287,35,1,0,0,0,288,289,5,21,0,0,289,290,3,114,
		57,0,290,291,5,13,0,0,291,37,1,0,0,0,292,293,5,22,0,0,293,298,3,114,57,
		0,294,295,5,4,0,0,295,297,3,114,57,0,296,294,1,0,0,0,297,300,1,0,0,0,298,
		296,1,0,0,0,298,299,1,0,0,0,299,39,1,0,0,0,300,298,1,0,0,0,301,302,5,23,
		0,0,302,303,3,114,57,0,303,304,5,24,0,0,304,41,1,0,0,0,305,306,5,25,0,
		0,306,43,1,0,0,0,307,308,5,26,0,0,308,309,3,114,57,0,309,310,5,24,0,0,
		310,45,1,0,0,0,311,313,5,27,0,0,312,314,3,114,57,0,313,312,1,0,0,0,313,
		314,1,0,0,0,314,47,1,0,0,0,315,316,5,28,0,0,316,317,3,114,57,0,317,318,
		5,29,0,0,318,49,1,0,0,0,319,322,3,54,27,0,320,322,3,52,26,0,321,319,1,
		0,0,0,321,320,1,0,0,0,322,51,1,0,0,0,323,324,3,80,40,0,324,325,5,2,0,0,
		325,327,3,10,5,0,326,328,5,5,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,53,
		1,0,0,0,329,330,3,124,62,0,330,332,3,80,40,0,331,333,5,5,0,0,332,331,1,
		0,0,0,332,333,1,0,0,0,333,55,1,0,0,0,334,335,5,12,0,0,335,336,3,124,62,
		0,336,337,3,122,61,0,337,338,3,78,39,0,338,346,1,0,0,0,339,340,5,12,0,
		0,340,341,3,78,39,0,341,342,5,13,0,0,342,343,3,124,62,0,343,344,3,122,
		61,0,344,346,1,0,0,0,345,334,1,0,0,0,345,339,1,0,0,0,346,57,1,0,0,0,347,
		350,3,114,57,0,348,350,3,10,5,0,349,347,1,0,0,0,349,348,1,0,0,0,350,59,
		1,0,0,0,351,356,3,58,29,0,352,353,5,4,0,0,353,355,3,58,29,0,354,352,1,
		0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,61,1,0,0,0,358,
		356,1,0,0,0,359,361,5,16,0,0,360,362,3,60,30,0,361,360,1,0,0,0,361,362,
		1,0,0,0,362,363,1,0,0,0,363,370,5,17,0,0,364,366,5,30,0,0,365,367,3,60,
		30,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,370,5,31,0,0,
		369,359,1,0,0,0,369,364,1,0,0,0,370,63,1,0,0,0,371,372,5,16,0,0,372,373,
		3,114,57,0,373,374,5,17,0,0,374,65,1,0,0,0,375,376,3,124,62,0,376,378,
		7,2,0,0,377,379,5,69,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,67,1,0,0,
		0,380,381,5,33,0,0,381,386,3,70,35,0,382,383,5,4,0,0,383,385,3,70,35,0,
		384,382,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,
		1,0,0,0,388,386,1,0,0,0,389,390,5,34,0,0,390,69,1,0,0,0,391,397,3,88,44,
		0,392,394,7,3,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,
		396,5,37,0,0,396,398,3,88,44,0,397,393,1,0,0,0,397,398,1,0,0,0,398,71,
		1,0,0,0,399,400,5,38,0,0,400,401,5,33,0,0,401,406,3,122,61,0,402,403,5,
		4,0,0,403,405,3,122,61,0,404,402,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,
		0,406,407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,410,5,34,0,0,410,
		73,1,0,0,0,411,414,3,68,34,0,412,414,3,72,36,0,413,411,1,0,0,0,413,412,
		1,0,0,0,414,75,1,0,0,0,415,421,3,134,67,0,416,421,3,122,61,0,417,421,3,
		64,32,0,418,421,3,118,59,0,419,421,3,66,33,0,420,415,1,0,0,0,420,416,1,
		0,0,0,420,417,1,0,0,0,420,418,1,0,0,0,420,419,1,0,0,0,421,77,1,0,0,0,422,
		423,5,30,0,0,423,424,3,114,57,0,424,425,5,39,0,0,425,426,3,114,57,0,426,
		427,5,31,0,0,427,435,1,0,0,0,428,429,5,10,0,0,429,430,3,114,57,0,430,431,
		5,39,0,0,431,432,3,114,57,0,432,433,5,11,0,0,433,435,1,0,0,0,434,422,1,
		0,0,0,434,428,1,0,0,0,435,79,1,0,0,0,436,445,3,76,38,0,437,444,3,62,31,
		0,438,439,5,38,0,0,439,444,3,80,40,0,440,441,5,40,0,0,441,444,3,120,60,
		0,442,444,3,74,37,0,443,437,1,0,0,0,443,438,1,0,0,0,443,440,1,0,0,0,443,
		442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,81,1,0,
		0,0,447,445,1,0,0,0,448,450,7,4,0,0,449,448,1,0,0,0,450,453,1,0,0,0,451,
		449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,455,3,
		80,40,0,455,83,1,0,0,0,456,461,3,82,41,0,457,458,5,43,0,0,458,460,3,82,
		41,0,459,457,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,
		85,1,0,0,0,463,461,1,0,0,0,464,469,3,84,42,0,465,466,7,5,0,0,466,468,3,
		84,42,0,467,465,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,
		0,470,87,1,0,0,0,471,469,1,0,0,0,472,477,3,86,43,0,473,474,7,3,0,0,474,
		476,3,86,43,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,
		1,0,0,0,478,89,1,0,0,0,479,477,1,0,0,0,480,485,3,88,44,0,481,482,5,37,
		0,0,482,484,3,88,44,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,
		485,486,1,0,0,0,486,91,1,0,0,0,487,485,1,0,0,0,488,493,3,90,45,0,489,490,
		7,6,0,0,490,492,3,90,45,0,491,489,1,0,0,0,492,495,1,0,0,0,493,491,1,0,
		0,0,493,494,1,0,0,0,494,93,1,0,0,0,495,493,1,0,0,0,496,501,3,92,46,0,497,
		498,7,7,0,0,498,500,3,92,46,0,499,497,1,0,0,0,500,503,1,0,0,0,501,499,
		1,0,0,0,501,502,1,0,0,0,502,95,1,0,0,0,503,501,1,0,0,0,504,509,3,94,47,
		0,505,506,7,8,0,0,506,508,3,94,47,0,507,505,1,0,0,0,508,511,1,0,0,0,509,
		507,1,0,0,0,509,510,1,0,0,0,510,97,1,0,0,0,511,509,1,0,0,0,512,517,3,96,
		48,0,513,514,5,54,0,0,514,516,3,96,48,0,515,513,1,0,0,0,516,519,1,0,0,
		0,517,515,1,0,0,0,517,518,1,0,0,0,518,99,1,0,0,0,519,517,1,0,0,0,520,525,
		3,98,49,0,521,522,5,55,0,0,522,524,3,98,49,0,523,521,1,0,0,0,524,527,1,
		0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,101,1,0,0,0,527,525,1,0,0,0,
		528,533,3,100,50,0,529,530,5,56,0,0,530,532,3,100,50,0,531,529,1,0,0,0,
		532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,103,1,0,0,0,535,533,
		1,0,0,0,536,541,3,102,51,0,537,538,5,57,0,0,538,540,3,102,51,0,539,537,
		1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,105,1,0,0,
		0,543,541,1,0,0,0,544,549,3,104,52,0,545,546,5,58,0,0,546,548,3,104,52,
		0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,
		107,1,0,0,0,551,549,1,0,0,0,552,553,5,23,0,0,553,554,3,114,57,0,554,555,
		5,24,0,0,555,556,3,114,57,0,556,557,5,25,0,0,557,558,3,114,57,0,558,109,
		1,0,0,0,559,560,5,23,0,0,560,561,3,114,57,0,561,562,5,24,0,0,562,570,3,
		114,57,0,563,564,5,26,0,0,564,565,3,114,57,0,565,566,5,24,0,0,566,567,
		3,114,57,0,567,569,1,0,0,0,568,563,1,0,0,0,569,572,1,0,0,0,570,568,1,0,
		0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,574,5,25,0,0,574,
		575,3,114,57,0,575,111,1,0,0,0,576,579,3,110,55,0,577,579,3,108,54,0,578,
		576,1,0,0,0,578,577,1,0,0,0,579,113,1,0,0,0,580,583,3,106,53,0,581,583,
		3,112,56,0,582,580,1,0,0,0,582,581,1,0,0,0,583,115,1,0,0,0,584,587,3,114,
		57,0,585,587,5,36,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,117,1,0,0,0,
		588,589,5,16,0,0,589,592,3,116,58,0,590,591,5,4,0,0,591,593,3,116,58,0,
		592,590,1,0,0,0,593,594,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,596,
		1,0,0,0,596,597,5,17,0,0,597,119,1,0,0,0,598,599,5,10,0,0,599,604,3,114,
		57,0,600,601,5,4,0,0,601,603,3,114,57,0,602,600,1,0,0,0,603,606,1,0,0,
		0,604,602,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,604,1,0,0,0,607,
		608,5,11,0,0,608,611,1,0,0,0,609,611,3,78,39,0,610,598,1,0,0,0,610,609,
		1,0,0,0,611,121,1,0,0,0,612,613,5,64,0,0,613,123,1,0,0,0,614,620,3,130,
		65,0,615,620,3,132,66,0,616,620,3,122,61,0,617,620,3,128,64,0,618,620,
		3,126,63,0,619,614,1,0,0,0,619,615,1,0,0,0,619,616,1,0,0,0,619,617,1,0,
		0,0,619,618,1,0,0,0,620,125,1,0,0,0,621,622,5,16,0,0,622,625,3,124,62,
		0,623,624,5,4,0,0,624,626,3,124,62,0,625,623,1,0,0,0,626,627,1,0,0,0,627,
		625,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,17,0,0,630,127,1,
		0,0,0,631,633,5,1,0,0,632,634,3,124,62,0,633,632,1,0,0,0,633,634,1,0,0,
		0,634,129,1,0,0,0,635,636,7,9,0,0,636,131,1,0,0,0,637,638,5,63,0,0,638,
		639,5,16,0,0,639,640,3,114,57,0,640,641,5,17,0,0,641,133,1,0,0,0,642,643,
		7,10,0,0,643,135,1,0,0,0,62,139,147,155,163,169,177,184,189,198,207,209,
		221,233,237,243,254,269,273,298,313,321,327,332,345,349,356,361,366,369,
		378,386,393,397,406,413,420,434,443,445,451,461,469,477,485,493,501,509,
		517,525,533,541,549,570,578,582,586,594,604,610,619,627,633
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
