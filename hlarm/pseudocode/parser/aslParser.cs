//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from asl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class aslParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		IDENTIFIER=67, STRING=68, DECIMAL_NUMBER=69, HEX_NUMBER=70, BINARY_NUMBER=71, 
		BITS=72, WHITE_SPACE=73, LINE_COMMENT=74, BLOB_COMMENT=75;
	public const int
		RULE_constantTest = 0, RULE_expressionTest = 1, RULE_lineTest = 2, RULE_sourceFile = 3, 
		RULE_lValueSet = 4, RULE_variableDeclaration = 5, RULE_referenceTag = 6, 
		RULE_line = 7, RULE_linedExpression = 8, RULE_assertStatement = 9, RULE_controlFlowStatements = 10, 
		RULE_hardStatements = 11, RULE_enumerationDeclaration = 12, RULE_typeMember = 13, 
		RULE_typeArrayDeclaration = 14, RULE_typeDeclaration = 15, RULE_emptyTypeDeclaration = 16, 
		RULE_newTypeDeclaration = 17, RULE_oldTypeRedeclaration = 18, RULE_forLoop = 19, 
		RULE_caseStatement = 20, RULE_whenStatement = 21, RULE_ifStatement = 22, 
		RULE_elseStatement = 23, RULE_elseIfStatement = 24, RULE_returnStatement = 25, 
		RULE_whileStatement = 26, RULE_explicitFunctionDeclaration = 27, RULE_singleVariableFunction = 28, 
		RULE_setExplicitFunctionDeclaration = 29, RULE_instructionDeclaration = 30, 
		RULE_operandData = 31, RULE_instructionHelperData = 32, RULE_normalExplicitFunctionDeclaration = 33, 
		RULE_arrayDeclaration = 34, RULE_commaSeperatedExpressionSingleton = 35, 
		RULE_commaSeperatedExpressions = 36, RULE_functionArguments = 37, RULE_parentheses = 38, 
		RULE_edgeCases = 39, RULE_bitAccessor = 40, RULE_bitFeild = 41, RULE_structAccessor = 42, 
		RULE_partAccessor = 43, RULE_baseExpression = 44, RULE_identifierPath = 45, 
		RULE_numberRange = 46, RULE_functionScriptOperations = 47, RULE_functionScriptingSecond = 48, 
		RULE_unaryOperations = 49, RULE_exponentialOperations = 50, RULE_multiplicationOperations = 51, 
		RULE_additionOperations = 52, RULE_concatOperations = 53, RULE_shiftingOperations = 54, 
		RULE_comparisonOperations = 55, RULE_equalityOperations = 56, RULE_bitwiseAndOperation = 57, 
		RULE_bitwiseExclusiveOrOperation = 58, RULE_bitwiseOrOperation = 59, RULE_logicalAndOperation = 60, 
		RULE_logicalOrOperation = 61, RULE_smallTernaryOperation = 62, RULE_bigTernaryOperation = 63, 
		RULE_teranryOperation = 64, RULE_expression = 65, RULE_tupleSingle = 66, 
		RULE_tuple = 67, RULE_collection = 68, RULE_identifier = 69, RULE_type = 70, 
		RULE_tupleType = 71, RULE_constantType = 72, RULE_concreteTypes = 73, 
		RULE_dynamicTypes = 74, RULE_constant = 75, RULE_binaryEncodingPattern = 76, 
		RULE_trueFalse = 77;
	public static readonly string[] ruleNames = {
		"constantTest", "expressionTest", "lineTest", "sourceFile", "lValueSet", 
		"variableDeclaration", "referenceTag", "line", "linedExpression", "assertStatement", 
		"controlFlowStatements", "hardStatements", "enumerationDeclaration", "typeMember", 
		"typeArrayDeclaration", "typeDeclaration", "emptyTypeDeclaration", "newTypeDeclaration", 
		"oldTypeRedeclaration", "forLoop", "caseStatement", "whenStatement", "ifStatement", 
		"elseStatement", "elseIfStatement", "returnStatement", "whileStatement", 
		"explicitFunctionDeclaration", "singleVariableFunction", "setExplicitFunctionDeclaration", 
		"instructionDeclaration", "operandData", "instructionHelperData", "normalExplicitFunctionDeclaration", 
		"arrayDeclaration", "commaSeperatedExpressionSingleton", "commaSeperatedExpressions", 
		"functionArguments", "parentheses", "edgeCases", "bitAccessor", "bitFeild", 
		"structAccessor", "partAccessor", "baseExpression", "identifierPath", 
		"numberRange", "functionScriptOperations", "functionScriptingSecond", 
		"unaryOperations", "exponentialOperations", "multiplicationOperations", 
		"additionOperations", "concatOperations", "shiftingOperations", "comparisonOperations", 
		"equalityOperations", "bitwiseAndOperation", "bitwiseExclusiveOrOperation", 
		"bitwiseOrOperation", "logicalAndOperation", "logicalOrOperation", "smallTernaryOperation", 
		"bigTernaryOperation", "teranryOperation", "expression", "tupleSingle", 
		"tuple", "collection", "identifier", "type", "tupleType", "constantType", 
		"concreteTypes", "dynamicTypes", "constant", "binaryEncodingPattern", 
		"trueFalse"
	};

	private static readonly string[] _LiteralNames = {
		null, "'constant'", "'='", "','", "'&'", "';'", "'assert'", "'IMPLEMENTATION_DEFINED'", 
		"'UNDEFINED'", "'enumeration'", "'{'", "'}'", "'array'", "'of'", "'type'", 
		"'is'", "'('", "')'", "'for'", "'to'", "'downto'", "'case'", "'when'", 
		"'if'", "'then'", "'else'", "'elsif'", "'return'", "'while'", "'do'", 
		"'instruction'", "'NOT'", "'['", "']'", "'UNKNOWN'", "'<'", "'>'", "'+'", 
		"'-'", "':'", "'.'", "'..'", "'IN'", "'!'", "'^'", "'*'", "'/'", "'DIV'", 
		"'MOD'", "'<<'", "'>>'", "'<='", "'>='", "'!='", "'=='", "'AND'", "'EOR'", 
		"'OR'", "'&&'", "'||'", "'boolean'", "'integer'", "'bit'", "'real'", "'bits'", 
		"'TRUE'", "'FALSE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "IDENTIFIER", "STRING", "DECIMAL_NUMBER", 
		"HEX_NUMBER", "BINARY_NUMBER", "BITS", "WHITE_SPACE", "LINE_COMMENT", 
		"BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "asl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static aslParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public aslParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public aslParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ConstantTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ConstantTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConstantTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConstantTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantTestContext constantTest() {
		ConstantTestContext _localctx = new ConstantTestContext(Context, State);
		EnterRule(_localctx, 0, RULE_constantTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0)) {
				{
				{
				State = 156;
				constant();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExpressionTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExpressionTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionTestContext expressionTest() {
		ExpressionTestContext _localctx = new ExpressionTestContext(Context, State);
		EnterRule(_localctx, 2, RULE_expressionTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152912431479980014L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 495L) != 0)) {
				{
				{
				State = 164;
				expression();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public LineTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLineTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLineTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTestContext lineTest() {
		LineTestContext _localctx = new LineTestContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152912429896346670L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 495L) != 0)) {
				{
				{
				State = 172;
				line();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(aslParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 6, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152912429896346670L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 495L) != 0)) {
				{
				{
				State = 180;
				line();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLValueSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLValueSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 8, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 188;
				Match(T__0);
				}
				break;
			}
			State = 191;
			expression();
			State = 192;
			Match(T__1);
			State = 193;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTagContext referenceTag() {
			return GetRuleContext<ReferenceTagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			type();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 196;
				referenceTag();
				}
			}

			State = 199;
			identifier();
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 200;
					Match(T__2);
					State = 201;
					identifier();
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 207;
				Match(T__1);
				State = 208;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTagContext : ParserRuleContext {
		public ReferenceTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterReferenceTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitReferenceTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTagContext referenceTag() {
		ReferenceTagContext _localctx = new ReferenceTagContext(Context, State);
		EnterRule(_localctx, 12, RULE_referenceTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationDeclarationContext enumerationDeclaration() {
			return GetRuleContext<EnumerationDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HardStatementsContext hardStatements() {
			return GetRuleContext<HardStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlFlowStatementsContext controlFlowStatements() {
			return GetRuleContext<ControlFlowStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinedExpressionContext linedExpression() {
			return GetRuleContext<LinedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitFunctionDeclarationContext explicitFunctionDeclaration() {
			return GetRuleContext<ExplicitFunctionDeclarationContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 14, RULE_line);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 213;
					lValueSet();
					}
					break;
				case 2:
					{
					State = 214;
					variableDeclaration();
					}
					break;
				case 3:
					{
					State = 215;
					returnStatement();
					}
					break;
				case 4:
					{
					State = 216;
					assertStatement();
					}
					break;
				case 5:
					{
					State = 217;
					enumerationDeclaration();
					}
					break;
				case 6:
					{
					State = 218;
					arrayDeclaration();
					}
					break;
				case 7:
					{
					State = 219;
					hardStatements();
					}
					break;
				}
				State = 222;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				controlFlowStatements();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225;
				typeDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226;
				linedExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				explicitFunctionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LinedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLinedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLinedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinedExpressionContext linedExpression() {
		LinedExpressionContext _localctx = new LinedExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_linedExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			expression();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 231;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_assertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(T__5);
			State = 235;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlFlowStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenStatementContext whenStatement() {
			return GetRuleContext<WhenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public ControlFlowStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlFlowStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterControlFlowStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitControlFlowStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlFlowStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlFlowStatementsContext controlFlowStatements() {
		ControlFlowStatementsContext _localctx = new ControlFlowStatementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_controlFlowStatements);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237;
				ifStatement();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				elseStatement();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239;
				elseIfStatement();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240;
				whileStatement();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				caseStatement();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 6);
				{
				State = 242;
				whenStatement();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 7);
				{
				State = 243;
				forLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HardStatementsContext : ParserRuleContext {
		public HardStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hardStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterHardStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitHardStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHardStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HardStatementsContext hardStatements() {
		HardStatementsContext _localctx = new HardStatementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_hardStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EnumerationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEnumerationDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEnumerationDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationDeclarationContext enumerationDeclaration() {
		EnumerationDeclarationContext _localctx = new EnumerationDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumerationDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(T__8);
			State = 249;
			identifier();
			State = 250;
			Match(T__9);
			State = 251;
			identifier();
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252;
					Match(T__2);
					State = 253;
					identifier();
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 259;
				Match(T__2);
				}
			}

			State = 262;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArrayDeclarationContext typeArrayDeclaration() {
			return GetRuleContext<TypeArrayDeclarationContext>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeMember);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__15:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				variableDeclaration();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				typeArrayDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTypeArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTypeArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArrayDeclarationContext typeArrayDeclaration() {
		TypeArrayDeclarationContext _localctx = new TypeArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeArrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__11);
			State = 269;
			numberRange();
			State = 270;
			Match(T__12);
			State = 271;
			type();
			State = 272;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewTypeDeclarationContext newTypeDeclaration() {
			return GetRuleContext<NewTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OldTypeRedeclarationContext oldTypeRedeclaration() {
			return GetRuleContext<OldTypeRedeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyTypeDeclarationContext emptyTypeDeclaration() {
			return GetRuleContext<EmptyTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeDeclaration);
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274;
				newTypeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				oldTypeRedeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276;
				emptyTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EmptyTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEmptyTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEmptyTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyTypeDeclarationContext emptyTypeDeclaration() {
		EmptyTypeDeclarationContext _localctx = new EmptyTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_emptyTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__13);
			State = 280;
			identifier();
			State = 281;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		public NewTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterNewTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitNewTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewTypeDeclarationContext newTypeDeclaration() {
		NewTypeDeclarationContext _localctx = new NewTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_newTypeDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__13);
			State = 284;
			identifier();
			State = 285;
			Match(T__14);
			State = 286;
			Match(T__15);
			State = 287;
			typeMember();
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 288;
					Match(T__2);
					State = 289;
					typeMember();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 295;
				Match(T__2);
				}
			}

			State = 298;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OldTypeRedeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OldTypeRedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oldTypeRedeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterOldTypeRedeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitOldTypeRedeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOldTypeRedeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OldTypeRedeclarationContext oldTypeRedeclaration() {
		OldTypeRedeclarationContext _localctx = new OldTypeRedeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_oldTypeRedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__13);
			State = 301;
			identifier();
			State = 302;
			Match(T__1);
			State = 303;
			type();
			State = 304;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 38, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(T__17);
			State = 307;
			lValueSet();
			State = 308;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 309;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_caseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__20);
			State = 312;
			expression();
			State = 313;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WhenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterWhenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitWhenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenStatementContext whenStatement() {
		WhenStatementContext _localctx = new WhenStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_whenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(T__21);
			State = 316;
			expression();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 317;
				Match(T__2);
				State = 318;
				expression();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(T__22);
			State = 325;
			expression();
			State = 326;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(T__25);
			State = 331;
			expression();
			State = 332;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(T__26);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152912431479980014L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 495L) != 0)) {
				{
				State = 335;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(T__27);
			State = 339;
			expression();
			State = 340;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalExplicitFunctionDeclarationContext normalExplicitFunctionDeclaration() {
			return GetRuleContext<NormalExplicitFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExplicitFunctionDeclarationContext setExplicitFunctionDeclaration() {
			return GetRuleContext<SetExplicitFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleVariableFunctionContext singleVariableFunction() {
			return GetRuleContext<SingleVariableFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionDeclarationContext instructionDeclaration() {
			return GetRuleContext<InstructionDeclarationContext>(0);
		}
		public ExplicitFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitFunctionDeclarationContext explicitFunctionDeclaration() {
		ExplicitFunctionDeclarationContext _localctx = new ExplicitFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_explicitFunctionDeclaration);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				normalExplicitFunctionDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				setExplicitFunctionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344;
				singleVariableFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				instructionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleVariableFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SingleVariableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleVariableFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSingleVariableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSingleVariableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleVariableFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleVariableFunctionContext singleVariableFunction() {
		SingleVariableFunctionContext _localctx = new SingleVariableFunctionContext(Context, State);
		EnterRule(_localctx, 56, RULE_singleVariableFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			type();
			State = 349;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExplicitFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations() {
			return GetRuleContext<FunctionScriptOperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public SetExplicitFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExplicitFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSetExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSetExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExplicitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExplicitFunctionDeclarationContext setExplicitFunctionDeclaration() {
		SetExplicitFunctionDeclarationContext _localctx = new SetExplicitFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_setExplicitFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			functionScriptOperations();
			State = 352;
			Match(T__1);
			State = 353;
			variableDeclaration();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 354;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandDataContext[] operandData() {
			return GetRuleContexts<OperandDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandDataContext operandData(int i) {
			return GetRuleContext<OperandDataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionHelperDataContext[] instructionHelperData() {
			return GetRuleContexts<InstructionHelperDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionHelperDataContext instructionHelperData(int i) {
			return GetRuleContext<InstructionHelperDataContext>(i);
		}
		public InstructionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterInstructionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitInstructionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionDeclarationContext instructionDeclaration() {
		InstructionDeclarationContext _localctx = new InstructionDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_instructionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(T__29);
			State = 358;
			Match(T__15);
			State = 359;
			constant();
			State = 360;
			constant();
			State = 361;
			Match(T__15);
			State = 362;
			operandData();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 363;
				Match(T__2);
				State = 364;
				operandData();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 370;
			Match(T__16);
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 371;
				Match(T__15);
				State = 372;
				instructionHelperData();
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 373;
					Match(T__2);
					State = 374;
					instructionHelperData();
					}
					}
					State = 379;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 380;
				Match(T__16);
				}
			}

			State = 384;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public OperandDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterOperandData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitOperandData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandDataContext operandData() {
		OperandDataContext _localctx = new OperandDataContext(Context, State);
		EnterRule(_localctx, 62, RULE_operandData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			identifier();
			State = 387;
			constant();
			State = 388;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionHelperDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public InstructionHelperDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionHelperData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterInstructionHelperData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitInstructionHelperData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionHelperData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionHelperDataContext instructionHelperData() {
		InstructionHelperDataContext _localctx = new InstructionHelperDataContext(Context, State);
		EnterRule(_localctx, 64, RULE_instructionHelperData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(T__30);
			State = 391;
			constant();
			State = 392;
			constant();
			State = 393;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalExplicitFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPathContext identifierPath() {
			return GetRuleContext<IdentifierPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public NormalExplicitFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalExplicitFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterNormalExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitNormalExplicitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalExplicitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalExplicitFunctionDeclarationContext normalExplicitFunctionDeclaration() {
		NormalExplicitFunctionDeclarationContext _localctx = new NormalExplicitFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_normalExplicitFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			type();
			State = 396;
			identifierPath();
			State = 397;
			functionArguments();
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 398;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_arrayDeclaration);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				Match(T__11);
				State = 402;
				type();
				State = 403;
				identifier();
				State = 404;
				numberRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				Match(T__11);
				State = 407;
				numberRange();
				State = 408;
				Match(T__12);
				State = 409;
				type();
				State = 410;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaSeperatedExpressionSingletonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public CommaSeperatedExpressionSingletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaSeperatedExpressionSingleton; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCommaSeperatedExpressionSingleton(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCommaSeperatedExpressionSingleton(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaSeperatedExpressionSingleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaSeperatedExpressionSingletonContext commaSeperatedExpressionSingleton() {
		CommaSeperatedExpressionSingletonContext _localctx = new CommaSeperatedExpressionSingletonContext(Context, State);
		EnterRule(_localctx, 70, RULE_commaSeperatedExpressionSingleton);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415;
				variableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaSeperatedExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaSeperatedExpressionSingletonContext[] commaSeperatedExpressionSingleton() {
			return GetRuleContexts<CommaSeperatedExpressionSingletonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaSeperatedExpressionSingletonContext commaSeperatedExpressionSingleton(int i) {
			return GetRuleContext<CommaSeperatedExpressionSingletonContext>(i);
		}
		public CommaSeperatedExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaSeperatedExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCommaSeperatedExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCommaSeperatedExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaSeperatedExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaSeperatedExpressionsContext commaSeperatedExpressions() {
		CommaSeperatedExpressionsContext _localctx = new CommaSeperatedExpressionsContext(Context, State);
		EnterRule(_localctx, 72, RULE_commaSeperatedExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			commaSeperatedExpressionSingleton();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 419;
				Match(T__2);
				State = 420;
				commaSeperatedExpressionSingleton();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaSeperatedExpressionsContext commaSeperatedExpressions() {
			return GetRuleContext<CommaSeperatedExpressionsContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionArguments);
		int _la;
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426;
				Match(T__15);
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152912431479980014L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 495L) != 0)) {
					{
					State = 427;
					commaSeperatedExpressions();
					}
				}

				State = 430;
				Match(T__16);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				Match(T__31);
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152912431479980014L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 495L) != 0)) {
					{
					State = 432;
					commaSeperatedExpressions();
					}
				}

				State = 435;
				Match(T__32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 76, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(T__15);
			State = 439;
			expression();
			State = 440;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeCasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(aslParser.STRING, 0); }
		public EdgeCasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeCases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEdgeCases(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEdgeCases(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeCasesContext edgeCases() {
		EdgeCasesContext _localctx = new EdgeCasesContext(Context, State);
		EnterRule(_localctx, 78, RULE_edgeCases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			type();
			State = 443;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__33) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 444;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitFeildContext[] bitFeild() {
			return GetRuleContexts<BitFeildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitFeildContext bitFeild(int i) {
			return GetRuleContext<BitFeildContext>(i);
		}
		public BitAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitAccessorContext bitAccessor() {
		BitAccessorContext _localctx = new BitAccessorContext(Context, State);
		EnterRule(_localctx, 80, RULE_bitAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(T__34);
			State = 448;
			bitFeild();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 449;
				Match(T__2);
				State = 450;
				bitFeild();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 456;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitFeildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext[] additionOperations() {
			return GetRuleContexts<AdditionOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext additionOperations(int i) {
			return GetRuleContext<AdditionOperationsContext>(i);
		}
		public BitFeildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitFeild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitFeild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitFeild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitFeild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitFeildContext bitFeild() {
		BitFeildContext _localctx = new BitFeildContext(Context, State);
		EnterRule(_localctx, 82, RULE_bitFeild);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			additionOperations();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) {
				{
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36 || _la==T__37) {
					{
					State = 459;
					_la = TokenStream.LA(1);
					if ( !(_la==T__36 || _la==T__37) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 462;
				Match(T__38);
				State = 463;
				additionOperations();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPathContext[] identifierPath() {
			return GetRuleContexts<IdentifierPathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPathContext identifierPath(int i) {
			return GetRuleContext<IdentifierPathContext>(i);
		}
		public StructAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterStructAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitStructAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructAccessorContext structAccessor() {
		StructAccessorContext _localctx = new StructAccessorContext(Context, State);
		EnterRule(_localctx, 84, RULE_structAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(T__39);
			State = 467;
			Match(T__34);
			State = 468;
			identifierPath();
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 469;
				Match(T__2);
				State = 470;
				identifierPath();
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 476;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitAccessorContext bitAccessor() {
			return GetRuleContext<BitAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAccessorContext structAccessor() {
			return GetRuleContext<StructAccessorContext>(0);
		}
		public PartAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterPartAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitPartAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartAccessorContext partAccessor() {
		PartAccessorContext _localctx = new PartAccessorContext(Context, State);
		EnterRule(_localctx, 86, RULE_partAccessor);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				bitAccessor();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				structAccessor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryEncodingPatternContext binaryEncodingPattern() {
			return GetRuleContext<BinaryEncodingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPathContext identifierPath() {
			return GetRuleContext<IdentifierPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeCasesContext edgeCases() {
			return GetRuleContext<EdgeCasesContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_baseExpression);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				trueFalse();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484;
				binaryEncodingPattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 485;
				identifierPath();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 486;
				parentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 487;
				tuple();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 488;
				edgeCases();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterIdentifierPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitIdentifierPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierPathContext identifierPath() {
		IdentifierPathContext _localctx = new IdentifierPathContext(Context, State);
		EnterRule(_localctx, 90, RULE_identifierPath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			identifier();
			State = 496;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 492;
					Match(T__39);
					State = 493;
					identifier();
					}
					} 
				}
				State = 498;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumberRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterNumberRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitNumberRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberRangeContext numberRange() {
		NumberRangeContext _localctx = new NumberRangeContext(Context, State);
		EnterRule(_localctx, 92, RULE_numberRange);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				Match(T__31);
				State = 500;
				expression();
				State = 501;
				Match(T__40);
				State = 502;
				expression();
				State = 503;
				Match(T__32);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(T__9);
				State = 506;
				expression();
				State = 507;
				Match(T__40);
				State = 508;
				expression();
				State = 509;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionScriptOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptingSecondContext[] functionScriptingSecond() {
			return GetRuleContexts<FunctionScriptingSecondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptingSecondContext functionScriptingSecond(int i) {
			return GetRuleContext<FunctionScriptingSecondContext>(i);
		}
		public FunctionScriptOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionScriptOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterFunctionScriptOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitFunctionScriptOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionScriptOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionScriptOperationsContext functionScriptOperations() {
		FunctionScriptOperationsContext _localctx = new FunctionScriptOperationsContext(Context, State);
		EnterRule(_localctx, 94, RULE_functionScriptOperations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			baseExpression();
			State = 517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 514;
					functionScriptingSecond();
					}
					} 
				}
				State = 519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionScriptingSecondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartAccessorContext partAccessor() {
			return GetRuleContext<PartAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations() {
			return GetRuleContext<FunctionScriptOperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public FunctionScriptingSecondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionScriptingSecond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterFunctionScriptingSecond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitFunctionScriptingSecond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionScriptingSecond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionScriptingSecondContext functionScriptingSecond() {
		FunctionScriptingSecondContext _localctx = new FunctionScriptingSecondContext(Context, State);
		EnterRule(_localctx, 96, RULE_functionScriptingSecond);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				functionArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				partAccessor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				Match(T__39);
				State = 523;
				functionScriptOperations();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 524;
				Match(T__41);
				State = 525;
				collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionScriptOperationsContext functionScriptOperations() {
			return GetRuleContext<FunctionScriptOperationsContext>(0);
		}
		public UnaryOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterUnaryOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitUnaryOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperationsContext unaryOperations() {
		UnaryOperationsContext _localctx = new UnaryOperationsContext(Context, State);
		EnterRule(_localctx, 98, RULE_unaryOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9073118412816L) != 0)) {
				{
				State = 528;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9073118412816L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 531;
			functionScriptOperations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentialOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperationsContext[] unaryOperations() {
			return GetRuleContexts<UnaryOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperationsContext unaryOperations(int i) {
			return GetRuleContext<UnaryOperationsContext>(i);
		}
		public ExponentialOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentialOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExponentialOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExponentialOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentialOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentialOperationsContext exponentialOperations() {
		ExponentialOperationsContext _localctx = new ExponentialOperationsContext(Context, State);
		EnterRule(_localctx, 100, RULE_exponentialOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			unaryOperations();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43) {
				{
				{
				State = 534;
				Match(T__43);
				State = 535;
				unaryOperations();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExponentialOperationsContext[] exponentialOperations() {
			return GetRuleContexts<ExponentialOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentialOperationsContext exponentialOperations(int i) {
			return GetRuleContext<ExponentialOperationsContext>(i);
		}
		public MultiplicationOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterMultiplicationOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitMultiplicationOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationOperationsContext multiplicationOperations() {
		MultiplicationOperationsContext _localctx = new MultiplicationOperationsContext(Context, State);
		EnterRule(_localctx, 102, RULE_multiplicationOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			exponentialOperations();
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) {
				{
				{
				State = 542;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 543;
				exponentialOperations();
				}
				}
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationOperationsContext[] multiplicationOperations() {
			return GetRuleContexts<MultiplicationOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationOperationsContext multiplicationOperations(int i) {
			return GetRuleContext<MultiplicationOperationsContext>(i);
		}
		public AdditionOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterAdditionOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitAdditionOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOperationsContext additionOperations() {
		AdditionOperationsContext _localctx = new AdditionOperationsContext(Context, State);
		EnterRule(_localctx, 104, RULE_additionOperations);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			multiplicationOperations();
			State = 554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 550;
					_la = TokenStream.LA(1);
					if ( !(_la==T__36 || _la==T__37) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 551;
					multiplicationOperations();
					}
					} 
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext[] additionOperations() {
			return GetRuleContexts<AdditionOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperationsContext additionOperations(int i) {
			return GetRuleContext<AdditionOperationsContext>(i);
		}
		public ConcatOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConcatOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConcatOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatOperationsContext concatOperations() {
		ConcatOperationsContext _localctx = new ConcatOperationsContext(Context, State);
		EnterRule(_localctx, 106, RULE_concatOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			additionOperations();
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__38) {
				{
				{
				State = 558;
				Match(T__38);
				State = 559;
				additionOperations();
				}
				}
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftingOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatOperationsContext[] concatOperations() {
			return GetRuleContexts<ConcatOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatOperationsContext concatOperations(int i) {
			return GetRuleContext<ConcatOperationsContext>(i);
		}
		public ShiftingOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftingOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterShiftingOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitShiftingOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftingOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftingOperationsContext shiftingOperations() {
		ShiftingOperationsContext _localctx = new ShiftingOperationsContext(Context, State);
		EnterRule(_localctx, 108, RULE_shiftingOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			concatOperations();
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__48 || _la==T__49) {
				{
				{
				State = 566;
				_la = TokenStream.LA(1);
				if ( !(_la==T__48 || _la==T__49) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 567;
				concatOperations();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftingOperationsContext[] shiftingOperations() {
			return GetRuleContexts<ShiftingOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftingOperationsContext shiftingOperations(int i) {
			return GetRuleContext<ShiftingOperationsContext>(i);
		}
		public ComparisonOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterComparisonOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitComparisonOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperationsContext comparisonOperations() {
		ComparisonOperationsContext _localctx = new ComparisonOperationsContext(Context, State);
		EnterRule(_localctx, 110, RULE_comparisonOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			shiftingOperations();
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6755502520270848L) != 0)) {
				{
				{
				State = 574;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6755502520270848L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 575;
				shiftingOperations();
				}
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperationsContext[] comparisonOperations() {
			return GetRuleContexts<ComparisonOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperationsContext comparisonOperations(int i) {
			return GetRuleContext<ComparisonOperationsContext>(i);
		}
		public EqualityOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterEqualityOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitEqualityOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperationsContext equalityOperations() {
		EqualityOperationsContext _localctx = new EqualityOperationsContext(Context, State);
		EnterRule(_localctx, 112, RULE_equalityOperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			comparisonOperations();
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__52 || _la==T__53) {
				{
				{
				State = 582;
				_la = TokenStream.LA(1);
				if ( !(_la==T__52 || _la==T__53) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 583;
				comparisonOperations();
				}
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperationsContext[] equalityOperations() {
			return GetRuleContexts<EqualityOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperationsContext equalityOperations(int i) {
			return GetRuleContext<EqualityOperationsContext>(i);
		}
		public BitwiseAndOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitwiseAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitwiseAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndOperationContext bitwiseAndOperation() {
		BitwiseAndOperationContext _localctx = new BitwiseAndOperationContext(Context, State);
		EnterRule(_localctx, 114, RULE_bitwiseAndOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			equalityOperations();
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__54) {
				{
				{
				State = 590;
				Match(T__54);
				State = 591;
				equalityOperations();
				}
				}
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseExclusiveOrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndOperationContext[] bitwiseAndOperation() {
			return GetRuleContexts<BitwiseAndOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndOperationContext bitwiseAndOperation(int i) {
			return GetRuleContext<BitwiseAndOperationContext>(i);
		}
		public BitwiseExclusiveOrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseExclusiveOrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitwiseExclusiveOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitwiseExclusiveOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExclusiveOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseExclusiveOrOperationContext bitwiseExclusiveOrOperation() {
		BitwiseExclusiveOrOperationContext _localctx = new BitwiseExclusiveOrOperationContext(Context, State);
		EnterRule(_localctx, 116, RULE_bitwiseExclusiveOrOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			bitwiseAndOperation();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__55) {
				{
				{
				State = 598;
				Match(T__55);
				State = 599;
				bitwiseAndOperation();
				}
				}
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseExclusiveOrOperationContext[] bitwiseExclusiveOrOperation() {
			return GetRuleContexts<BitwiseExclusiveOrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseExclusiveOrOperationContext bitwiseExclusiveOrOperation(int i) {
			return GetRuleContext<BitwiseExclusiveOrOperationContext>(i);
		}
		public BitwiseOrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOperationContext bitwiseOrOperation() {
		BitwiseOrOperationContext _localctx = new BitwiseOrOperationContext(Context, State);
		EnterRule(_localctx, 118, RULE_bitwiseOrOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			bitwiseExclusiveOrOperation();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__56) {
				{
				{
				State = 606;
				Match(T__56);
				State = 607;
				bitwiseExclusiveOrOperation();
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrOperationContext[] bitwiseOrOperation() {
			return GetRuleContexts<BitwiseOrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrOperationContext bitwiseOrOperation(int i) {
			return GetRuleContext<BitwiseOrOperationContext>(i);
		}
		public LogicalAndOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLogicalAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLogicalAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndOperationContext logicalAndOperation() {
		LogicalAndOperationContext _localctx = new LogicalAndOperationContext(Context, State);
		EnterRule(_localctx, 120, RULE_logicalAndOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			bitwiseOrOperation();
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__57) {
				{
				{
				State = 614;
				Match(T__57);
				State = 615;
				bitwiseOrOperation();
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndOperationContext[] logicalAndOperation() {
			return GetRuleContexts<LogicalAndOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndOperationContext logicalAndOperation(int i) {
			return GetRuleContext<LogicalAndOperationContext>(i);
		}
		public LogicalOrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterLogicalOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitLogicalOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrOperationContext logicalOrOperation() {
		LogicalOrOperationContext _localctx = new LogicalOrOperationContext(Context, State);
		EnterRule(_localctx, 122, RULE_logicalOrOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			logicalAndOperation();
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__58) {
				{
				{
				State = 622;
				Match(T__58);
				State = 623;
				logicalAndOperation();
				}
				}
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SmallTernaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SmallTernaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smallTernaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterSmallTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitSmallTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallTernaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SmallTernaryOperationContext smallTernaryOperation() {
		SmallTernaryOperationContext _localctx = new SmallTernaryOperationContext(Context, State);
		EnterRule(_localctx, 124, RULE_smallTernaryOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(T__22);
			State = 630;
			expression();
			State = 631;
			Match(T__23);
			State = 632;
			expression();
			State = 633;
			Match(T__24);
			State = 634;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigTernaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BigTernaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigTernaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBigTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBigTernaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigTernaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigTernaryOperationContext bigTernaryOperation() {
		BigTernaryOperationContext _localctx = new BigTernaryOperationContext(Context, State);
		EnterRule(_localctx, 126, RULE_bigTernaryOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(T__22);
			State = 637;
			expression();
			State = 638;
			Match(T__23);
			State = 639;
			expression();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 640;
				Match(T__25);
				State = 641;
				expression();
				State = 642;
				Match(T__23);
				State = 643;
				expression();
				}
				}
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 650;
			Match(T__24);
			State = 651;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeranryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BigTernaryOperationContext bigTernaryOperation() {
			return GetRuleContext<BigTernaryOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SmallTernaryOperationContext smallTernaryOperation() {
			return GetRuleContext<SmallTernaryOperationContext>(0);
		}
		public TeranryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teranryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTeranryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTeranryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeranryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeranryOperationContext teranryOperation() {
		TeranryOperationContext _localctx = new TeranryOperationContext(Context, State);
		EnterRule(_localctx, 128, RULE_teranryOperation);
		try {
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 653;
				bigTernaryOperation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 654;
				smallTernaryOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrOperationContext logicalOrOperation() {
			return GetRuleContext<LogicalOrOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeranryOperationContext teranryOperation() {
			return GetRuleContext<TeranryOperationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_expression);
		try {
			State = 659;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__15:
			case T__30:
			case T__37:
			case T__42:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case IDENTIFIER:
			case DECIMAL_NUMBER:
			case HEX_NUMBER:
			case BINARY_NUMBER:
			case BITS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 657;
				logicalOrOperation();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 658;
				teranryOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleSingleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleSingleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleSingle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTupleSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTupleSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleSingleContext tupleSingle() {
		TupleSingleContext _localctx = new TupleSingleContext(Context, State);
		EnterRule(_localctx, 132, RULE_tupleSingle);
		try {
			State = 663;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 661;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 662;
				Match(T__37);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleSingleContext[] tupleSingle() {
			return GetRuleContexts<TupleSingleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleSingleContext tupleSingle(int i) {
			return GetRuleContext<TupleSingleContext>(i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 134, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(T__15);
			State = 666;
			tupleSingle();
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 667;
				Match(T__2);
				State = 668;
				tupleSingle();
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__2 );
			State = 673;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 136, RULE_collection);
		int _la;
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675;
				Match(T__9);
				State = 676;
				expression();
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 677;
					Match(T__2);
					State = 678;
					expression();
					}
					}
					State = 683;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 684;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				numberRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(aslParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcreteTypesContext concreteTypes() {
			return GetRuleContext<ConcreteTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicTypesContext dynamicTypes() {
			return GetRuleContext<DynamicTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantTypeContext constantType() {
			return GetRuleContext<ConstantTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_type);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 691;
				concreteTypes();
				}
				break;
			case T__63:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692;
				dynamicTypes();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 693;
				constantType();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 694;
				tupleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(T__15);
			State = 698;
			type();
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 699;
				Match(T__2);
				State = 700;
				type();
				}
				}
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__2 );
			State = 705;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConstantType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConstantType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantTypeContext constantType() {
		ConstantTypeContext _localctx = new ConstantTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_constantType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(T__0);
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 708;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcreteTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConcreteTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concreteTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConcreteTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConcreteTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcreteTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcreteTypesContext concreteTypes() {
		ConcreteTypesContext _localctx = new ConcreteTypesContext(Context, State);
		EnterRule(_localctx, 146, RULE_concreteTypes);
		try {
			State = 716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__59:
				EnterOuterAlt(_localctx, 1);
				{
				State = 711;
				Match(T__59);
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712;
				Match(T__60);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 713;
				Match(T__61);
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 4);
				{
				State = 714;
				Match(T__62);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 715;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DynamicTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterDynamicTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitDynamicTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicTypesContext dynamicTypes() {
		DynamicTypesContext _localctx = new DynamicTypesContext(Context, State);
		EnterRule(_localctx, 148, RULE_dynamicTypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(T__63);
			State = 719;
			Match(T__15);
			State = 720;
			expression();
			State = 721;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(aslParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(aslParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_NUMBER() { return GetToken(aslParser.BINARY_NUMBER, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 150, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryEncodingPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITS() { return GetToken(aslParser.BITS, 0); }
		public BinaryEncodingPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryEncodingPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterBinaryEncodingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitBinaryEncodingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryEncodingPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryEncodingPatternContext binaryEncodingPattern() {
		BinaryEncodingPatternContext _localctx = new BinaryEncodingPatternContext(Context, State);
		EnterRule(_localctx, 152, RULE_binaryEncodingPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(BITS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.EnterTrueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IaslListener typedListener = listener as IaslListener;
			if (typedListener != null) typedListener.ExitTrueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaslVisitor<TResult> typedVisitor = visitor as IaslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(Context, State);
		EnterRule(_localctx, 154, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			_la = TokenStream.LA(1);
			if ( !(_la==T__64 || _la==T__65) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,75,730,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		1,0,5,0,158,8,0,10,0,12,0,161,9,0,1,0,1,0,1,1,5,1,166,8,1,10,1,12,1,169,
		9,1,1,1,1,1,1,2,5,2,174,8,2,10,2,12,2,177,9,2,1,2,1,2,1,3,5,3,182,8,3,
		10,3,12,3,185,9,3,1,3,1,3,1,4,3,4,190,8,4,1,4,1,4,1,4,1,4,1,5,1,5,3,5,
		198,8,5,1,5,1,5,1,5,5,5,203,8,5,10,5,12,5,206,9,5,1,5,1,5,3,5,210,8,5,
		1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,221,8,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,229,8,7,1,8,1,8,3,8,233,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,245,8,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,255,
		8,12,10,12,12,12,258,9,12,1,12,3,12,261,8,12,1,12,1,12,1,13,1,13,3,13,
		267,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,278,8,15,1,
		16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,291,8,17,10,
		17,12,17,294,9,17,1,17,3,17,297,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		5,21,320,8,21,10,21,12,21,323,9,21,1,22,1,22,1,22,1,22,1,23,1,23,1,24,
		1,24,1,24,1,24,1,25,1,25,3,25,337,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,
		27,1,27,3,27,347,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,356,8,29,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,366,8,30,10,30,12,30,369,
		9,30,1,30,1,30,1,30,1,30,1,30,5,30,376,8,30,10,30,12,30,379,9,30,1,30,
		1,30,3,30,383,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
		32,1,33,1,33,1,33,1,33,3,33,400,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,3,34,413,8,34,1,35,1,35,3,35,417,8,35,1,36,1,36,1,
		36,5,36,422,8,36,10,36,12,36,425,9,36,1,37,1,37,3,37,429,8,37,1,37,1,37,
		1,37,3,37,434,8,37,1,37,3,37,437,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,
		39,3,39,446,8,39,1,40,1,40,1,40,1,40,5,40,452,8,40,10,40,12,40,455,9,40,
		1,40,1,40,1,41,1,41,3,41,461,8,41,1,41,1,41,3,41,465,8,41,1,42,1,42,1,
		42,1,42,1,42,5,42,472,8,42,10,42,12,42,475,9,42,1,42,1,42,1,43,1,43,3,
		43,481,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,490,8,44,1,45,1,45,
		1,45,5,45,495,8,45,10,45,12,45,498,9,45,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,3,46,512,8,46,1,47,1,47,5,47,516,8,47,10,
		47,12,47,519,9,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,527,8,48,1,49,3,49,
		530,8,49,1,49,1,49,1,50,1,50,1,50,5,50,537,8,50,10,50,12,50,540,9,50,1,
		51,1,51,1,51,5,51,545,8,51,10,51,12,51,548,9,51,1,52,1,52,1,52,5,52,553,
		8,52,10,52,12,52,556,9,52,1,53,1,53,1,53,5,53,561,8,53,10,53,12,53,564,
		9,53,1,54,1,54,1,54,5,54,569,8,54,10,54,12,54,572,9,54,1,55,1,55,1,55,
		5,55,577,8,55,10,55,12,55,580,9,55,1,56,1,56,1,56,5,56,585,8,56,10,56,
		12,56,588,9,56,1,57,1,57,1,57,5,57,593,8,57,10,57,12,57,596,9,57,1,58,
		1,58,1,58,5,58,601,8,58,10,58,12,58,604,9,58,1,59,1,59,1,59,5,59,609,8,
		59,10,59,12,59,612,9,59,1,60,1,60,1,60,5,60,617,8,60,10,60,12,60,620,9,
		60,1,61,1,61,1,61,5,61,625,8,61,10,61,12,61,628,9,61,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,646,
		8,63,10,63,12,63,649,9,63,1,63,1,63,1,63,1,64,1,64,3,64,656,8,64,1,65,
		1,65,3,65,660,8,65,1,66,1,66,3,66,664,8,66,1,67,1,67,1,67,1,67,4,67,670,
		8,67,11,67,12,67,671,1,67,1,67,1,68,1,68,1,68,1,68,5,68,680,8,68,10,68,
		12,68,683,9,68,1,68,1,68,1,68,3,68,688,8,68,1,69,1,69,1,70,1,70,1,70,1,
		70,3,70,696,8,70,1,71,1,71,1,71,1,71,4,71,702,8,71,11,71,12,71,703,1,71,
		1,71,1,72,1,72,3,72,710,8,72,1,73,1,73,1,73,1,73,1,73,3,73,717,8,73,1,
		74,1,74,1,74,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,0,0,78,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,0,11,1,0,7,8,1,0,19,20,2,0,7,7,34,
		34,1,0,37,38,4,0,4,4,31,31,38,38,43,43,1,0,45,48,1,0,49,50,2,0,35,36,51,
		52,1,0,53,54,1,0,69,71,1,0,65,66,746,0,159,1,0,0,0,2,167,1,0,0,0,4,175,
		1,0,0,0,6,183,1,0,0,0,8,189,1,0,0,0,10,195,1,0,0,0,12,211,1,0,0,0,14,228,
		1,0,0,0,16,230,1,0,0,0,18,234,1,0,0,0,20,244,1,0,0,0,22,246,1,0,0,0,24,
		248,1,0,0,0,26,266,1,0,0,0,28,268,1,0,0,0,30,277,1,0,0,0,32,279,1,0,0,
		0,34,283,1,0,0,0,36,300,1,0,0,0,38,306,1,0,0,0,40,311,1,0,0,0,42,315,1,
		0,0,0,44,324,1,0,0,0,46,328,1,0,0,0,48,330,1,0,0,0,50,334,1,0,0,0,52,338,
		1,0,0,0,54,346,1,0,0,0,56,348,1,0,0,0,58,351,1,0,0,0,60,357,1,0,0,0,62,
		386,1,0,0,0,64,390,1,0,0,0,66,395,1,0,0,0,68,412,1,0,0,0,70,416,1,0,0,
		0,72,418,1,0,0,0,74,436,1,0,0,0,76,438,1,0,0,0,78,442,1,0,0,0,80,447,1,
		0,0,0,82,458,1,0,0,0,84,466,1,0,0,0,86,480,1,0,0,0,88,489,1,0,0,0,90,491,
		1,0,0,0,92,511,1,0,0,0,94,513,1,0,0,0,96,526,1,0,0,0,98,529,1,0,0,0,100,
		533,1,0,0,0,102,541,1,0,0,0,104,549,1,0,0,0,106,557,1,0,0,0,108,565,1,
		0,0,0,110,573,1,0,0,0,112,581,1,0,0,0,114,589,1,0,0,0,116,597,1,0,0,0,
		118,605,1,0,0,0,120,613,1,0,0,0,122,621,1,0,0,0,124,629,1,0,0,0,126,636,
		1,0,0,0,128,655,1,0,0,0,130,659,1,0,0,0,132,663,1,0,0,0,134,665,1,0,0,
		0,136,687,1,0,0,0,138,689,1,0,0,0,140,695,1,0,0,0,142,697,1,0,0,0,144,
		707,1,0,0,0,146,716,1,0,0,0,148,718,1,0,0,0,150,723,1,0,0,0,152,725,1,
		0,0,0,154,727,1,0,0,0,156,158,3,150,75,0,157,156,1,0,0,0,158,161,1,0,0,
		0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,
		163,5,0,0,1,163,1,1,0,0,0,164,166,3,130,65,0,165,164,1,0,0,0,166,169,1,
		0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,
		170,171,5,0,0,1,171,3,1,0,0,0,172,174,3,14,7,0,173,172,1,0,0,0,174,177,
		1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,
		0,178,179,5,0,0,1,179,5,1,0,0,0,180,182,3,14,7,0,181,180,1,0,0,0,182,185,
		1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,
		0,186,187,5,0,0,1,187,7,1,0,0,0,188,190,5,1,0,0,189,188,1,0,0,0,189,190,
		1,0,0,0,190,191,1,0,0,0,191,192,3,130,65,0,192,193,5,2,0,0,193,194,3,130,
		65,0,194,9,1,0,0,0,195,197,3,140,70,0,196,198,3,12,6,0,197,196,1,0,0,0,
		197,198,1,0,0,0,198,199,1,0,0,0,199,204,3,138,69,0,200,201,5,3,0,0,201,
		203,3,138,69,0,202,200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,
		1,0,0,0,205,209,1,0,0,0,206,204,1,0,0,0,207,208,5,2,0,0,208,210,3,130,
		65,0,209,207,1,0,0,0,209,210,1,0,0,0,210,11,1,0,0,0,211,212,5,4,0,0,212,
		13,1,0,0,0,213,221,3,8,4,0,214,221,3,10,5,0,215,221,3,50,25,0,216,221,
		3,18,9,0,217,221,3,24,12,0,218,221,3,68,34,0,219,221,3,22,11,0,220,213,
		1,0,0,0,220,214,1,0,0,0,220,215,1,0,0,0,220,216,1,0,0,0,220,217,1,0,0,
		0,220,218,1,0,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,223,5,5,0,0,223,
		229,1,0,0,0,224,229,3,20,10,0,225,229,3,30,15,0,226,229,3,16,8,0,227,229,
		3,54,27,0,228,220,1,0,0,0,228,224,1,0,0,0,228,225,1,0,0,0,228,226,1,0,
		0,0,228,227,1,0,0,0,229,15,1,0,0,0,230,232,3,130,65,0,231,233,5,5,0,0,
		232,231,1,0,0,0,232,233,1,0,0,0,233,17,1,0,0,0,234,235,5,6,0,0,235,236,
		3,130,65,0,236,19,1,0,0,0,237,245,3,44,22,0,238,245,3,46,23,0,239,245,
		3,48,24,0,240,245,3,52,26,0,241,245,3,40,20,0,242,245,3,42,21,0,243,245,
		3,38,19,0,244,237,1,0,0,0,244,238,1,0,0,0,244,239,1,0,0,0,244,240,1,0,
		0,0,244,241,1,0,0,0,244,242,1,0,0,0,244,243,1,0,0,0,245,21,1,0,0,0,246,
		247,7,0,0,0,247,23,1,0,0,0,248,249,5,9,0,0,249,250,3,138,69,0,250,251,
		5,10,0,0,251,256,3,138,69,0,252,253,5,3,0,0,253,255,3,138,69,0,254,252,
		1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,260,1,0,0,
		0,258,256,1,0,0,0,259,261,5,3,0,0,260,259,1,0,0,0,260,261,1,0,0,0,261,
		262,1,0,0,0,262,263,5,11,0,0,263,25,1,0,0,0,264,267,3,10,5,0,265,267,3,
		28,14,0,266,264,1,0,0,0,266,265,1,0,0,0,267,27,1,0,0,0,268,269,5,12,0,
		0,269,270,3,92,46,0,270,271,5,13,0,0,271,272,3,140,70,0,272,273,3,138,
		69,0,273,29,1,0,0,0,274,278,3,34,17,0,275,278,3,36,18,0,276,278,3,32,16,
		0,277,274,1,0,0,0,277,275,1,0,0,0,277,276,1,0,0,0,278,31,1,0,0,0,279,280,
		5,14,0,0,280,281,3,138,69,0,281,282,5,5,0,0,282,33,1,0,0,0,283,284,5,14,
		0,0,284,285,3,138,69,0,285,286,5,15,0,0,286,287,5,16,0,0,287,292,3,26,
		13,0,288,289,5,3,0,0,289,291,3,26,13,0,290,288,1,0,0,0,291,294,1,0,0,0,
		292,290,1,0,0,0,292,293,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,295,297,
		5,3,0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,17,0,
		0,299,35,1,0,0,0,300,301,5,14,0,0,301,302,3,138,69,0,302,303,5,2,0,0,303,
		304,3,140,70,0,304,305,5,5,0,0,305,37,1,0,0,0,306,307,5,18,0,0,307,308,
		3,8,4,0,308,309,7,1,0,0,309,310,3,130,65,0,310,39,1,0,0,0,311,312,5,21,
		0,0,312,313,3,130,65,0,313,314,5,13,0,0,314,41,1,0,0,0,315,316,5,22,0,
		0,316,321,3,130,65,0,317,318,5,3,0,0,318,320,3,130,65,0,319,317,1,0,0,
		0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,43,1,0,0,0,323,321,
		1,0,0,0,324,325,5,23,0,0,325,326,3,130,65,0,326,327,5,24,0,0,327,45,1,
		0,0,0,328,329,5,25,0,0,329,47,1,0,0,0,330,331,5,26,0,0,331,332,3,130,65,
		0,332,333,5,24,0,0,333,49,1,0,0,0,334,336,5,27,0,0,335,337,3,130,65,0,
		336,335,1,0,0,0,336,337,1,0,0,0,337,51,1,0,0,0,338,339,5,28,0,0,339,340,
		3,130,65,0,340,341,5,29,0,0,341,53,1,0,0,0,342,347,3,66,33,0,343,347,3,
		58,29,0,344,347,3,56,28,0,345,347,3,60,30,0,346,342,1,0,0,0,346,343,1,
		0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,347,55,1,0,0,0,348,349,3,140,70,
		0,349,350,3,138,69,0,350,57,1,0,0,0,351,352,3,94,47,0,352,353,5,2,0,0,
		353,355,3,10,5,0,354,356,5,5,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,59,
		1,0,0,0,357,358,5,30,0,0,358,359,5,16,0,0,359,360,3,150,75,0,360,361,3,
		150,75,0,361,362,5,16,0,0,362,367,3,62,31,0,363,364,5,3,0,0,364,366,3,
		62,31,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,
		0,368,370,1,0,0,0,369,367,1,0,0,0,370,382,5,17,0,0,371,372,5,16,0,0,372,
		377,3,64,32,0,373,374,5,3,0,0,374,376,3,64,32,0,375,373,1,0,0,0,376,379,
		1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,377,1,0,0,
		0,380,381,5,17,0,0,381,383,1,0,0,0,382,371,1,0,0,0,382,383,1,0,0,0,383,
		384,1,0,0,0,384,385,5,17,0,0,385,61,1,0,0,0,386,387,3,138,69,0,387,388,
		3,150,75,0,388,389,3,150,75,0,389,63,1,0,0,0,390,391,5,31,0,0,391,392,
		3,150,75,0,392,393,3,150,75,0,393,394,3,150,75,0,394,65,1,0,0,0,395,396,
		3,140,70,0,396,397,3,90,45,0,397,399,3,74,37,0,398,400,5,5,0,0,399,398,
		1,0,0,0,399,400,1,0,0,0,400,67,1,0,0,0,401,402,5,12,0,0,402,403,3,140,
		70,0,403,404,3,138,69,0,404,405,3,92,46,0,405,413,1,0,0,0,406,407,5,12,
		0,0,407,408,3,92,46,0,408,409,5,13,0,0,409,410,3,140,70,0,410,411,3,138,
		69,0,411,413,1,0,0,0,412,401,1,0,0,0,412,406,1,0,0,0,413,69,1,0,0,0,414,
		417,3,130,65,0,415,417,3,10,5,0,416,414,1,0,0,0,416,415,1,0,0,0,417,71,
		1,0,0,0,418,423,3,70,35,0,419,420,5,3,0,0,420,422,3,70,35,0,421,419,1,
		0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,73,1,0,0,0,425,
		423,1,0,0,0,426,428,5,16,0,0,427,429,3,72,36,0,428,427,1,0,0,0,428,429,
		1,0,0,0,429,430,1,0,0,0,430,437,5,17,0,0,431,433,5,32,0,0,432,434,3,72,
		36,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,437,5,33,0,0,
		436,426,1,0,0,0,436,431,1,0,0,0,437,75,1,0,0,0,438,439,5,16,0,0,439,440,
		3,130,65,0,440,441,5,17,0,0,441,77,1,0,0,0,442,443,3,140,70,0,443,445,
		7,2,0,0,444,446,5,68,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,79,1,0,0,
		0,447,448,5,35,0,0,448,453,3,82,41,0,449,450,5,3,0,0,450,452,3,82,41,0,
		451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,
		1,0,0,0,455,453,1,0,0,0,456,457,5,36,0,0,457,81,1,0,0,0,458,464,3,104,
		52,0,459,461,7,3,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,
		463,5,39,0,0,463,465,3,104,52,0,464,460,1,0,0,0,464,465,1,0,0,0,465,83,
		1,0,0,0,466,467,5,40,0,0,467,468,5,35,0,0,468,473,3,90,45,0,469,470,5,
		3,0,0,470,472,3,90,45,0,471,469,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,
		0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,477,5,36,0,0,477,
		85,1,0,0,0,478,481,3,80,40,0,479,481,3,84,42,0,480,478,1,0,0,0,480,479,
		1,0,0,0,481,87,1,0,0,0,482,490,3,150,75,0,483,490,3,154,77,0,484,490,3,
		152,76,0,485,490,3,90,45,0,486,490,3,76,38,0,487,490,3,134,67,0,488,490,
		3,78,39,0,489,482,1,0,0,0,489,483,1,0,0,0,489,484,1,0,0,0,489,485,1,0,
		0,0,489,486,1,0,0,0,489,487,1,0,0,0,489,488,1,0,0,0,490,89,1,0,0,0,491,
		496,3,138,69,0,492,493,5,40,0,0,493,495,3,138,69,0,494,492,1,0,0,0,495,
		498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,91,1,0,0,0,498,496,1,0,
		0,0,499,500,5,32,0,0,500,501,3,130,65,0,501,502,5,41,0,0,502,503,3,130,
		65,0,503,504,5,33,0,0,504,512,1,0,0,0,505,506,5,10,0,0,506,507,3,130,65,
		0,507,508,5,41,0,0,508,509,3,130,65,0,509,510,5,11,0,0,510,512,1,0,0,0,
		511,499,1,0,0,0,511,505,1,0,0,0,512,93,1,0,0,0,513,517,3,88,44,0,514,516,
		3,96,48,0,515,514,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,
		0,0,518,95,1,0,0,0,519,517,1,0,0,0,520,527,3,74,37,0,521,527,3,86,43,0,
		522,523,5,40,0,0,523,527,3,94,47,0,524,525,5,42,0,0,525,527,3,136,68,0,
		526,520,1,0,0,0,526,521,1,0,0,0,526,522,1,0,0,0,526,524,1,0,0,0,527,97,
		1,0,0,0,528,530,7,4,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,
		0,531,532,3,94,47,0,532,99,1,0,0,0,533,538,3,98,49,0,534,535,5,44,0,0,
		535,537,3,98,49,0,536,534,1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,
		539,1,0,0,0,539,101,1,0,0,0,540,538,1,0,0,0,541,546,3,100,50,0,542,543,
		7,5,0,0,543,545,3,100,50,0,544,542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,
		0,0,546,547,1,0,0,0,547,103,1,0,0,0,548,546,1,0,0,0,549,554,3,102,51,0,
		550,551,7,3,0,0,551,553,3,102,51,0,552,550,1,0,0,0,553,556,1,0,0,0,554,
		552,1,0,0,0,554,555,1,0,0,0,555,105,1,0,0,0,556,554,1,0,0,0,557,562,3,
		104,52,0,558,559,5,39,0,0,559,561,3,104,52,0,560,558,1,0,0,0,561,564,1,
		0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,107,1,0,0,0,564,562,1,0,0,0,
		565,570,3,106,53,0,566,567,7,6,0,0,567,569,3,106,53,0,568,566,1,0,0,0,
		569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,109,1,0,0,0,572,570,
		1,0,0,0,573,578,3,108,54,0,574,575,7,7,0,0,575,577,3,108,54,0,576,574,
		1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,111,1,0,0,
		0,580,578,1,0,0,0,581,586,3,110,55,0,582,583,7,8,0,0,583,585,3,110,55,
		0,584,582,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,
		113,1,0,0,0,588,586,1,0,0,0,589,594,3,112,56,0,590,591,5,55,0,0,591,593,
		3,112,56,0,592,590,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,
		0,0,595,115,1,0,0,0,596,594,1,0,0,0,597,602,3,114,57,0,598,599,5,56,0,
		0,599,601,3,114,57,0,600,598,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,
		603,1,0,0,0,603,117,1,0,0,0,604,602,1,0,0,0,605,610,3,116,58,0,606,607,
		5,57,0,0,607,609,3,116,58,0,608,606,1,0,0,0,609,612,1,0,0,0,610,608,1,
		0,0,0,610,611,1,0,0,0,611,119,1,0,0,0,612,610,1,0,0,0,613,618,3,118,59,
		0,614,615,5,58,0,0,615,617,3,118,59,0,616,614,1,0,0,0,617,620,1,0,0,0,
		618,616,1,0,0,0,618,619,1,0,0,0,619,121,1,0,0,0,620,618,1,0,0,0,621,626,
		3,120,60,0,622,623,5,59,0,0,623,625,3,120,60,0,624,622,1,0,0,0,625,628,
		1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,123,1,0,0,0,628,626,1,0,0,
		0,629,630,5,23,0,0,630,631,3,130,65,0,631,632,5,24,0,0,632,633,3,130,65,
		0,633,634,5,25,0,0,634,635,3,130,65,0,635,125,1,0,0,0,636,637,5,23,0,0,
		637,638,3,130,65,0,638,639,5,24,0,0,639,647,3,130,65,0,640,641,5,26,0,
		0,641,642,3,130,65,0,642,643,5,24,0,0,643,644,3,130,65,0,644,646,1,0,0,
		0,645,640,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,
		650,1,0,0,0,649,647,1,0,0,0,650,651,5,25,0,0,651,652,3,130,65,0,652,127,
		1,0,0,0,653,656,3,126,63,0,654,656,3,124,62,0,655,653,1,0,0,0,655,654,
		1,0,0,0,656,129,1,0,0,0,657,660,3,122,61,0,658,660,3,128,64,0,659,657,
		1,0,0,0,659,658,1,0,0,0,660,131,1,0,0,0,661,664,3,130,65,0,662,664,5,38,
		0,0,663,661,1,0,0,0,663,662,1,0,0,0,664,133,1,0,0,0,665,666,5,16,0,0,666,
		669,3,132,66,0,667,668,5,3,0,0,668,670,3,132,66,0,669,667,1,0,0,0,670,
		671,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,5,
		17,0,0,674,135,1,0,0,0,675,676,5,10,0,0,676,681,3,130,65,0,677,678,5,3,
		0,0,678,680,3,130,65,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,
		681,682,1,0,0,0,682,684,1,0,0,0,683,681,1,0,0,0,684,685,5,11,0,0,685,688,
		1,0,0,0,686,688,3,92,46,0,687,675,1,0,0,0,687,686,1,0,0,0,688,137,1,0,
		0,0,689,690,5,67,0,0,690,139,1,0,0,0,691,696,3,146,73,0,692,696,3,148,
		74,0,693,696,3,144,72,0,694,696,3,142,71,0,695,691,1,0,0,0,695,692,1,0,
		0,0,695,693,1,0,0,0,695,694,1,0,0,0,696,141,1,0,0,0,697,698,5,16,0,0,698,
		701,3,140,70,0,699,700,5,3,0,0,700,702,3,140,70,0,701,699,1,0,0,0,702,
		703,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,5,
		17,0,0,706,143,1,0,0,0,707,709,5,1,0,0,708,710,3,140,70,0,709,708,1,0,
		0,0,709,710,1,0,0,0,710,145,1,0,0,0,711,717,5,60,0,0,712,717,5,61,0,0,
		713,717,5,62,0,0,714,717,5,63,0,0,715,717,3,138,69,0,716,711,1,0,0,0,716,
		712,1,0,0,0,716,713,1,0,0,0,716,714,1,0,0,0,716,715,1,0,0,0,717,147,1,
		0,0,0,718,719,5,64,0,0,719,720,5,16,0,0,720,721,3,130,65,0,721,722,5,17,
		0,0,722,149,1,0,0,0,723,724,7,9,0,0,724,151,1,0,0,0,725,726,5,72,0,0,726,
		153,1,0,0,0,727,728,7,10,0,0,728,155,1,0,0,0,67,159,167,175,183,189,197,
		204,209,220,228,232,244,256,260,266,277,292,296,321,336,346,355,367,377,
		382,399,412,416,423,428,433,436,445,453,460,464,473,480,489,496,511,517,
		526,529,538,546,554,562,570,578,586,594,602,610,618,626,647,655,659,663,
		671,681,687,695,703,709,716
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
